Version 8.0
===========

New Features and Enhancements
----------------------------- 
* Added CArchive.
  CArchive provides a convenient means of saving and restoring an application's
  data, by streaming the data to and from a file.
  
* Added CObject
  CObject provides the Serialize virtual function which is used by CArchive. 
  Any class inherited from CObject can override Serialize to customize the
  way its data is saved in the archive. CWnd and CWinThread inherit from
  CObject. Classes created by the user can inherit from CObject as well.  
  
* Added CRegKey.
  CRegKey is a wrapper for functions used to access and modify the registry.  

* Added CTime and CTimeSpan
  CTime manages the display of date and time.
  CTimeSpan calculates the interval between times and dates.

* Added  GetCommandLineArgs
  This function provides access to the command line arguments. They are
  returned in a vector of CString.

* Added VERIFY macro
  In debug mode, VERIFY asserts if the expression evaluates to zero
  In release mode, VERIFY evaluates the expression, but doesn't assert
  
* Renamed Header files
  The header files located in the include directory have been prefixed 
  with wxx_ . This was done to avoid potential name conflicts with header
  files from other libraries.  

* Updated CFile
  - The nOpenFlags used in CFile::Open, and CFile's constructor continue to
    support the same file creation modes as before, but now support additional
	modes as well.
  	Possible nOpenFlag values: CREATE_NEW, CREATE_ALWAYS, OPEN_EXISTING, 
	    OPEN_ALWAYS, TRUNCATE_EXISTING
	 Default value: OPEN_EXISTING | modeReadWrite
	 The following modes are also supported:
	- CFile::modeCreate			Same as CREATE_ALWAYS.
	- CFile::modeNoTruncate		Same as OPEN_ALWAYS.
	- CFile::modeRead			Requests read access only.
	- CFile::modeWrite			Requests write access only.
	- CFile::modeReadWrite		Requests read and write access.
	- CFile::shareExclusive		Denies read and write access to all others.
	- CFile::shareDenyWrite		Denies write access to all others.
	- CFile::shareDenyRead		Denies read access to all others.
	- CFile::shareDenyNone		No sharing restrictions.
  - CFile now throws an exception under the following circumstances
    - Failure to read from a file
    - Failure to write from a file
    - Failure to open the file in CFile's constructor
	
Updated Samples
 - Added INIFrame sample. 
    This sample demonstrates the use of INI files.
 - Added TimeDemo sample.
    This sample demonstrates the use of CTime and CTimeSpan and CArchive.
 - Updated Scribble. 
     This sample now uses a Doc/View architecture, and CArchive to store data. 
 	

Changes in detail
-----------------
Added CArchive
Added CObject
Added CRegKey
Added CTime
Added CTimeSpan
Added CFrame::SaveRegistryMRUSettings
Added CWinException::GetText
Added ::GetCommandLineArgs

Added VERIFY macro
Added _WIN32XX_VER macro
Added INIFrame sample
Added TimeDemo sample

Modified CFile::CFile   		throws an exception on fail to open file
Modified CFile::Read    		throws an exception on fail to read file
Modified CFile::Write           throws an exception on fail to write file

Renamed the header files. They are prefixed with wxx_


Version 7.9
===========

Overview
--------
This version of Win32++ moves away from the use of pointers. Where before we 
would use pointers to objects in Win32++ function calls, we now use the objects
directly. The USE_OBSOLETE_CODE macro has been provided in this version to make
code migration easier. Even with this macro defined, you will need to use 
non-pointer arguments in Win32++ function calls.

New Features and Enhancements
-----------------------------
* The FromHandle method of creating temporary CWnds has been obsoleted. 
The FromHandle approach had the following disadvantages:
 - It required the newly created CWnds to be removed some indeterminate time
   after being created. This was done in OnIdle.
 - The running of OnIdle can be delayed indefinitely while windows runs
   any internal message loop, causing temporaries to accumulate. Internal
   message loops are run while menus are active, for example.   
 - It encouraged an inappropriate reliance on raw pointers to CWnd objects.
 - There was confusion about when the temporary CWnd was destroyed.
The FromHandle approach has been replaced. CWnd member functions which 
previously returned a CWnd pointer(CWnd*) now return CWnd. 
Coding examples: (The GetParent function now returns a CWnd)
 GetParent().SendMessage(SomeMessage, wParam, lParam);
 HWND hWnd = GetParent(); // retrieve the parent window's HWND
 
* The FromHandle for the other types has been obsoleted as well. This includes:
  - CBitmap::FromHandle
  - CBrush::FromHandle
  - CDC::FromHandle
  - CFont::FromHandle
  - CPalette:: FromHandle
  - CPen::FromHandle
  - CRgn::FromHandle
  
  Note: All versions of FromHandle are available if the USE_OBSOLETE_CODE
  is defined.
  
 * Message handler functions have been standardised to the form:
  LRESULT OnSomeMessage(UINT uMSg, WPARAM wParam, LPARAM lParam).
 
  Note:
  - OnCommand,  OnNotify and OnNotifyReflect remain unchanged.
  - The older CFrame::OnMessageXX handlers are available if the 
    USE_OBSOLETE_CODE is defined.
 
* Many functions which previously used a CWnd* argument now use a HWND
argument. This has the following advantages:
 - These functions can be used directly for a HWND, CWnd or CWnd pointer.
 - We no longer have to needlessly create temporary CWnds.
Coding examples: (the Create function now has a HWND argument)
 CWnd MyCWnd;
 MyCWnd.Create(Some_CWnd);	 // Another CWnd called Some_CWnd is the parent window 
 MyCWnd.Create(*this);       // This CWnd is the parent window. (dereferenced pointer)
 MyCWnd.Create(GetHwnd());   // This CWnd is the parent window.
 MyCwnd.Create(GetParent()); // The parent of this CWnd is the parent window
 MyCWnd.Create(Some_HWND);   // A window with the specified HWND is the parent window 
 MyCWnd.Create();            // The created window has no parent window
 
 Note: CWnd has operator overloading. We can use the CWnd object in place
 of its corresponding HWND anywhere in code.  

* Many functions which previously used pointers to other Win32++ classes
now also use the relevant handle instead. These include member functions for
CDC, CBitmap, CBrush, CFont, CPalette, CPen, CRgn, CImageList and CMenu.
Each of these classes have operator overloading, so the class object can be
used instead of the handle.

* CDC, CBrush, CBitmap, CFont, CPalette, CPen, CRgn, CMenu and CImageList.
 - These classes destroy the resource they manage when their destructor is
   called, but only if Win32++ created it. This allows us to attach resources
   provided by the operating system (HDCs, HFONTS, HIMAGELISTS etc.) without
   having to detach them later to prevent them from being destroyed.
 - These classes can be re-used. There is no need to detach the current
   handle before assigning a new one.
 - These classes use reference counting, so they can be safely copied. This
   allows them to be returned by value from functions.
   
* The various CFrame protected member variables are now private. Setters
   and getters are used to access them. Frame creation options that can be
   set in CMainFrame::OnCreate are now CFrame member functions rather than
   protected CFrame member variables. e.g. we now use SetUseThemes(FALSE)
   in place of m_UseThemes = FALSE .
   
* Updated Samples
 - Added round window sample.
 - Add DoubleBuffer sample.
 - Added choose font and word wrap options to notepad sample.
 - Updated black theme in themes sample.
 
* Updated the documentation
  - Within Using Win32++
    - Updated Graphics Device Interface (GDI)
	- Added Bitmaps
	- Added ImageLists
	- Added Menus
   

Step by step guide to code migration
------------------------------------
1) Define the USE_OBSOLETE_CODE For this version, a USE_OBSOLETE_CODE macro is 
   provided to assist with code migration. It adds the older definitions of the
   following:
  - CWnd::Create
  - CWnd::OnDraw  
  - CWnd::OnEraseBkgnd
 
  - CBitmap::FromHandle
  - CBrush::FromHandle
  - CDC::FromHandle  
  - CFont::FromHandle
  - CImageList::FromHandle
  - CMenu::FromHandle  
  - CPalette::FromHandle
  - CPen::FromHandle
  - CRgn::FromHandle
  - CWnd::FromHandle  
  
  - The messages handlers in CDocker and CFrame of the form:
    - CDocker::OnMessageXX(WPARAM wParam, LPARAM lParam)
    - CFrame::OnMessageXX(WPARAM wParam, LPARAM lParam)
	- CMDIFrame::OnMessageXX(WPARAM wParam, LPARAM lParam)
	- CMDIChild::OnMessageXX(WPARAM wParam, LPARAM lParam)
  
  If used, this macro must be defined before including the Win32++ header files.
  It can be placed in stdafx.h if precompiled headers are used. Even with this
  macro you will need to use non-pointer versions of function arguments.

2) Replace pointers to Win32++ objects to their non-pointer equivalents.
   This could be done by dereferencing the pointer (add a * before the pointer),
   or by removing the address-of operator & .   

3) Use "." instead of "->" when using the return of Win32++ functions.

4) At this stage your program should compile and run. The next step is to
   remove dependence on the USE_OBSOLETE_CODE macro.
   
   a) Modify the definitions of any Create, OnDraw and OnEraseBkgnd functions.
      If the definitions of these functions are incorrect, they won't get called
	  automatically.
   
   b) Remove the use of FromHandle in your code. There might be better ways
      but we can always use Attach and Detach in place of FromHandle.
	  
   c) Add the UINT parameter to the message handlers. For example:
       OnSize(WPARAM wParam, LPARAM lParam)
	   should now be:
	   OnSize(UINT uMsg, WPARAM wParam, LPARAM lParam)
            
   d) Remove the definition of USE_OBSOLETE_CODE.

Other tips:
*) The following Win32++ classes are reference counted and can be safely copied.
   CDC, CMenu, CImageList, CBitmap, CBrush, CFont, CPalette, CPen, CRgn, CGDIObject.
   This allows them to be safely passed by value in function calls. More
   importantly, it also allows these to be safely returned from functions. 
   Reference counting permits this:
    CDC dc = GetDCEx(hrgnClip, flags);            // GetDCEx returns CWnd
	CMenu PopupMenu = TopMenu.GetSubMenu(0);      // GetSubMenu returns CMenu
	CImageList iml = GetToolBar().GetImageList(); // GetImageList return CImageList
    CFont myfont = GetFont();                     // GetFont returns CFont
   
*) GetCWndPtr can be used to retrieve a CWnd pointer from the global map.

*) There is no need to add use GetHwnd(), GetHandle() or GetHDC() when using
   objects in functioning calls expecting a handle. The Win32++ classes use
   operator overloading to do these conversions automatically.
   
  
Changes in detail
-----------------
The following virtual functions have been modified
CWnd::Create
CWnd::CreateEx
CWnd::OnDraw
CWnd::OnEraseBkgnd

Other changes:
Function which returned pointers to Win32++ objects now return Win32++ objects
Functions arguments which were pointers to Win32++ objects are now handles.  

Added CClientDCEx

Added CFrame::GetShowStatusBar
Added CFrame::GetShowCmd
Added CFrame::GetShowToolBar
Added CFrame::GetUseIndicatorStatus
Added CFrame::GetUseMenuStatus
Added CFrame::GetUseReBar
Added CFrame::GetUseThemes
Added CFrame::GetUseToolBar
Added CFrame::SetShowCmd
Added CFrame::SetUseIndicatorStatus
Added CFrame::SetUseMenuStatus
Added CFrame::SetUseReBar
Added CFrame::SetUseThemes
Added CFrame::SetUseToolBar

Modified CBitmap::CreateCompatibleBitmap
Modified CBitmap::CreateDIBitmap
Modified CBitmap::CreateDIBSection
Modified CBitmap::GetDIBits
Modified CBitmap::SetDIBits
Modified CBitmapInfoPtr::CBitmapInfoPtr
Modified CBrush::CreatePatternBrush
Modified CClientDC::CClientDC
Modified CComboBoxEx::GetImageList
Modified CComboBoxEx::SetImageList
Modified CDC::BitBlt
Modified CDC::CreateCompatibleDC
Modified CDC::CreateCompatibleBitmap
Modified CDC::CreateDIBitmap
Modified CDC::CreateDIBSection
Modified CDC::CreatePatternBrush
Modified CDC::DrawIconEx
Modified CDC::ExtSelectClipRgn
Modified CDC::FillRect
Modified CDC::FillRgn
Modified CDC::FrameRect
Modified CDC::FrameRgn
Modified CDC::GetCurrentBitmap
Modified CDC::GetCurrentBrush
Modified CDC::GetCurrentFont
Modified CDC::GetCurrentPalette
Modified CDC::GetCurrentPen
Modified CDC::GrayString
Modified CDC::MaskBlt
Modified CDC::GetDIBits
Modified CDC::PaintRgn
Modified CDC::SelectClipRgn
Modified CDC::SelectObject (all versions)
Modified CDC::SetDIBits
Modified CDC::StretchBlt
Modified CDC::TransparentBlt
Modified CDateTime::GetMonthCalFont
Modified CDialog::Create
Modified CDialog::DoModal
Modified CDialog::DoModeless
Modified CDialog::GotoDlgCtrl
Modified CDocker::GetDockBar		
Modified CDocker::GetDockClient	
Modified CDocker::GetDockHint
Modified CDocker::IsChildOfDocker
Modified CDocker::IsRelated
Modified CDocker::OnDockActivated
Modified CDocker::OnDockDestroyed
Modified CDocker::OnExitSizeMove
Modified CDocker::OnNCLButtonDblClk
Modified CDocker::OnSysColorChange
Modified CDocker::OnSysCommand
Modified CDocker::OnTimer
Modified CDocker::OnWindowPosChanging
Modified CDocker::OnWindowPosChanged
Modified CFile::OpenFileDialog
Modified CFile::SaveFileDialog
Modified CFont::CreatePointFont
Modified CFont::CreatePointFontIndirect
Modified CFrame::AddToolBarBand
Modified CFrame::DrawReBarBkgnd
Modified CFrame::DrawStatusBarBkgnd
Modified CFrame::ExcludeChildRect
Modified CFrame::GetFrameMenu
Modified CFrame::GetMenuItemPos
Modified CFrame::GetMenuBar
Modified CFrame::GetMenuBarTheme
Modified CFrame::GetReBar
Modified CFrame::GetReBarTheme
Modified CFrame::GetStatusBar
Modified CFrame::GetStatusBarTheme
Modified CFrame::GetToolBar
Modified CFrame::GetToolBarTheme
Modified CFrame::OnActivate
Modified CFrame::OnDrawItem
Modified CFrame::OnExitMenuLoop
Modified CFrame::OnHelp
Modified CFrame::OnInitMenuPopup
Modified CFrame::OnMeasureItem
Modified CFrame::OnMenuChar
Modified CFrame::OnMenuSelect
Modified CFrame::OnSetFocus
Modified CFrame::OnSize
Modified CFrame::OnSysColorChange
Modified CFrame::OnSysCommand
Modified CFrame::OnViewStatusBar
Modified CFrame::OnViewToolBar
Modified CFrame::SetMenuTheme
Modified CFrame::SetReBarTheme
Modified CFrame::SetStatusBarTheme
Modified CFrame::SetTBImageList
Modified CFrame::SetTBImageListDis
Modified CFrame::SetTBImageListHot
Modified CFrame::SetToolBarTheme
Modified CHeader::CreateDragImage
Modified CHeader::GetImageList
Modified CHeader::GetImageList
Modified CImageList::Add
Modified CImageList::DragEnter
Modified CImageList::DragLeave
Modified CImageList::Draw
Modified CImageList::DrawEx
Modified CImageList::GetIconSize
Modified CListView::GetImageList
Modified CListView::SetImageList
Modified CMDIChild::OnMDIActivate
Modified CMDIChild::OnWindowPosChanged
Modified CMDIFrame::AppendMDIMenu
Modified CMDIFrame::CDockMDIClient::Create
Modified CMDIFrame::GetActiveMenu
Modified CMDIFrame::GetDockClient
Modified CMDIFrame::GetMDIClient
Modified CMDIFrame::OnInitMenuPopup
Modified CMDIFrame::OnWindowPosChanged
Modified CMemDC::CMemDC
Modified CMenu::AppendMenu
Modified CMenu::GetSubMenu
Modified CMenu::InsertMenu
Modified CMenu::ModifyMenu
Modified CMenu::SetMenuItemBitmaps
Modified CMenu::TrackPopupMenu
Modified CMenu::TrackPopupMenuEx
Modified CMenuBar::DrawAllMDIButtons
Modified CMetaFileDC::CreateEnhanced
Modified CPaintDC::CPaintDC
Modified CPalette::CreateHalftonePalette
Modified CPropertySheet::CPropertySheet
Modified CReBar::GetToolTips
Modified CReBar::OnLButtonDown
Modified CReBar::OnLButtonUp
Modified CReBar::OnMouseMove
Modified CReBar::OnTBWinPosChanging
Modified CReBar::OnToolBarResize
Modified CReBar::SetBandBitmap
Modified CReBar::SetToolTips
Modified CRibbon::CreateRibbon
Modified CResizer::AddChild
Modified CRgn::CombineRgn
Modified CRgn::CopyRgn
Modified CRgn::EqualRgn
Modified CSlider::GetBuddy
Modified CSlider::SetBuddy
Modified CSlider::GetToolTips
Modified CSlider::SetToolTips
Modified CSpinButton::GetBuddy
Modified CSpinButton::SetBuddy
Modified CTab::DrawCloseButton
Modified CTab::DrawListButton
Modified CTab::DrawTabs
Modified CTab::DrawTabBorders
Modified CTab::GetListMenu
Modified CTab::GetODImageList
Modified CTab::GetTabFont
Modified CTab::GetToolTips
Modified CTab::OnEraseBkgnd
Modified CTab::OnLButtonDblClk
Modified CTab::OnLButtonDown
Modified CTab::OnLButtonUp
Modified CTab::OnMouseLeave
Modified CTab::OnMouseMove
Modified CTab::OnKillFocus
Modified CTab::OnPaint
Modified CTab::OnNCHitTest
Modified CTab::OnSetFocus
Modified CTab::OnWindowPosChanged
Modified CTab::OnWindowPosChanging
Modified CTab::SetFont
Modified CTab::SetImageList
Modified CTab::SetToolTips
Modified CTabbedMDI::GetListMenu
Modified CTabbedMDI::OnWindowPosChanged
Modified CToolBar::GetDisabledImageList
Modified CToolBar::GetHotImageList
Modified CToolBar::GetImageList
Modified CToolBar::SetImageList
Modified CToolBar::SetDisableImageList
Modified CToolBar::SetHotImageList
Modified CToolTip::AddTool
Modified CToolTip::DelTool
Modified CToolTip::GetText
Modified CToolTip::GetToolInfo
Modified CToolTip::SetToolRect
Modified CToolTip::HitTest
Modified CToolTip::UpdateTipText
Modified CTreeView::GetImageList
Modified CTreeView::GetToolTips
Modified CTreeView::SetImageList
Modified CTreeView::SetToolTips
Modified CWindowDC::CWindowDC
Modified CWnd::AttachDlgItem
Modified CWnd::BeginPaint
Modified CWnd::ChildFromPoint
Modified CWnd::DrawCaption
Modified CWnd::GetActiveWindow
Modified CWnd::GetAncestor
Modified CWnd::GetDC
Modified CWnd::GetDCEx
Modified CWnd::GetFocus
Modified CWnd::DeferWindowPos
Modified CWnd::GetDecktopWindow
Modified CWnd::GetDlgItem
Modified CWnd::GetUpdateRgn
Modified CWnd::GetWindowDC
Modified CWnd::HiliteMenuItem
Modified CWnd::InvalidateRgn
Modified CWnd::GetLastActivePopup
Modified CWnd::GetNextDlgGroupItem
Modified CWnd::GetNextDlgTabItem
Modified CWnd::GetParent
Modified CWnd::GetTopWindow
Modified CWnd::GetWindow
Modified CWnd::IsChild
Modified CWnd::MapWindowPoints
Modified CWnd::Print
Modified CWnd::RedrawWindow
Modified CWnd::ReleaseDC
Modified CWnd::ScrollWindowEx
Modified CWnd::SetActiveWindow
Modified CWnd::SetCapture
Modified CWnd::SetFont
Modified CWnd::SetFocus
Modified CWnd::SetMenu
Modified CWnd::SetParent
Modified CWnd::SetWindowPos
Modified CWnd::SetWindowRgn
Modified CWnd::ValidateRgn
Modified CWnd::WindowFromDC
Modified CWnd::WindowFromPoint

Removed static const CWnd wndTop(HWND_TOP);
Removed static const CWnd wndTopMost(HWND_TOPMOST);
Removed static const CWnd wndBottom(HWND_BOTTOM);
Removed static const CWnd wndNoTopMost(HWND_NOTOPMOST);
Removed CResizer::AddChild   (one of two)

Renamed CWnd::FromHandlePermanent to CWnd::GetCWndPtr


Version 7.8
===========

Bug Fixes
* Rebar bands holding Toolbar buttons with text are now sized correctly.
* Tab controls now support tabbing to child dialogs.

New Features and enhancements
-----------------------------
* Updated CDC
   - Added palette support.
   - Added path support.
   - Added MaskBlt and TransparentBlt functions
   - Now able to retrieve GDI objects currently selected in the device context.

Changes in detail
-----------------
Added CDC::BeginPath
Added CDC::CloseFigure
Added CDC::CreateHalftonePalette
Added CDC::CreatePalette
Added CDC::EndPath
Added CDC::EnumObjects
Added CDC::FlattenPath 
Added CDC::FrameRgn
Added CDC::FlattenPath
Added CDC::GetClipPath
Added CDC::GetCharABCWidths 
Added CDC::GetCHarABCWidthsI
Added CDC::GetCharacterPlacement 
Added CDC::GetCharWidth
Added CDC::GetCharWidthI
Added CDC::GetColorAdjustment
Added CDC::GetCurrentBitmap
Added CDC::GetCurrentBrush
Added CDC::GetCurrentFont
Added CDC::GetCurrentPalette
Added CDC::GetCurrentPen
Added CDC::GetFontData
Added CDC::GetFontLanguageInfo
Added CDC::GetGlyphOutline
Added CDC::GetKerningPairs	 
Added CDC::GetMiterLimit
Added CDC::GetNearestColor
Added CDC::GetPolyFillMode 
Added CDC::GetROP2
Added CDC::GetStockObject
Added CDC::GradientFill
Added CDC::MaskBlt
Added CDC::RestoreDC
Added CDC::SaveDC
Added CDC::SelectClipPath
Added CDC::SelectStockObject
Added CDC::SetColorAdjustment 
Added CDC::SetMapperFlags
Added CDC::SetMiterLimit
Added CDC::SetPolyFillMode  
Added CDC::TransparentBlt
Added CDC::UpdateColors
Added CDC::WidenPath


Version 7.7
===========

Bug Fixes:
* Deletion of the HIMAGELIST managed by CImageList.
* Container in container docking.
* Double notifications from tab controls.
* CDocker::Close can now be used to close any child docker.

New Features and Enhancements
-----------------------------
* Frames now directly support docking
   Previously CFrames implemented docking through the view window. Now CFrame 
   inherits from CDocker and implements docking directly. Users can now add
   dockers to a frame that doesn't use a docker as the view window. 
   Alternatively users can implement docking through the view window as before.   

* MDI Frames directly support docking
   Dockers can now be added to classic MDI Frames. Code to add dockers to a
   MDI frame might look like this:
   
	void CMainMDIFrame::OnInitialUpdate()
	{
		// Add some dockers
		DWORD dwStyle = DS_CLIENTEDGE; // The style added to each docker
		int DockWidth = 150;
		AddDockedChild(new CDockFiles, DS_DOCKED_LEFT | dwStyle, DockWidth);
		AddDockedChild(new CDockFiles, DS_DOCKED_RIGHT | dwStyle, DockWidth);
		
		// Add some MDI children
		AddMDIChild(new CSimpleMDIChild);
		AddMDIChild(new CSimpleMDIChild); 		
	}
	
* Windows created by CWnd::Create can now be initially created as maximized or
   minimized by specifying the WS_MAXIMIZE or WS_MINIMIZE styles in PreCreate,
   even though this is not supported by the CreateWindowEx Windows API function.
   
* Frames now load the show state (maximized or normal) from the registry.   
	
* Added DockMDI sample.	
  This sample demonstrates adding Dockers to MDI Frames.
	
* Dockers now default to fixed size resizing instead of proportional size 
   resizing for dock children. The DS_FIXED_RESIZE style has been replaced with
   DS_NO_FIXED_RESIZE.	
	
Changes in detail
-----------------
Added CFrame::m_ShowCmd      (loaded from the registry: SW_MAXIMIZE or SW_SHOW)
Added CMDIFrame::GetActiveMenu
Added CTab::OnSetFocus
Modified CTabbedMDI::AddMIDChild
Removed CDocker::OnDockSetFocus
Removed CDocker::OnFrameGotFocus
Removed CDocker::OnFrameLostFocus
Removed CDocker::OnSetFocus
Removed CFrame::GetView (now inherits from CDocker::GetView)
Removed CFrame::SetView (now inherits from CDocker::SetView)
Removed CMDIFrame::UpdateCheckMarks
Renamed CDocker::LoadRegistrySettings to CDocker::LoadDockRegistrySettings
Renamed CDocker::SaveRegistrySettings to CDocker::SaveDockRegistrySettings
Renamed CFrame::m_bUseIndicatorStatus to CFrame::m_UseIndicatorStatus
Renamed CFrame::m_bUseMenuStatus      to CFrame::m_UseMenuStatus
Renamed CFrame::m_bUseReBar           to CFrame::m_UseReBar
Renamed CFrame::m_bUseThemes          to CFrame::m_UseThemes
Renamed CFrame::m_bUseToolBar         to CFrame::m_UseToolBar
Renamed CFrame::m_bShowStatusBar      to CFrame::m_ShowStatusBar
Renamed CFrame::m_bShowToolBar        to CFrame::m_ShowToolBar

Removed user defined messages:
UWN_DOCKSETFOCUS
UWN_FRAMELOSTFOCUS
UWN_FRAMEGOTFOCUS

Changed dock styles
Added   DS_NO_FIXED_RESIZE
Removed DS_FIXED_RESIZE


Version 7.6.1
=============

Bug Fixes:
- In some circumstances, CTab would assert when used in a CDialog.
- ReBarDemo now resizes properly.
- CenterWindow now works to center the PropertySheets in the PropertySheet sample.

New Features and Enhancements
* OnInitialUpdate delayed until after window is created.
   OnInitialUpdate is now called after the window creation has fully completed. 
   Code which needs to run before this should be put in OnCreate.
* CFrame now displays menu icons when themes are disabled.   
* CRect has been updated to emulate the CRect provided with ATL and MFC
* DynamicResize option add to the Dock sample    


Changes in detail
-----------------
Modified CRect::CopyRect
Modified CRect::DeflateRect
Modified CRect::EqualRect
Modified CRect::InflateRect
Modified CRect::IntersectRect
Modified CRect::SubtractRect
Modified CRect::UnionRect
renamed cstring.h to c_string.h


Version 7.6
===========

New Features and Enhancements
-----------------------------
* Added StatusBar themes.
   StatusBars can fill the background with a color gradient. The two 
   colors can be specified by SetStatusBarTheme.
   
* Switching between views is now supported, using SetView
  The following classes support switching views:
   - Frames
   - MDI Children
   - Dockers
   - DockContainers
   
* Updated Frames
   - IDW_INDICATOR_CAPS, IDW_INDICATOR_NUM and IDW_INDICATOR_SCRL string
      resources are used to define the status indicators. These string
	  resources should be added to the resource script (resource.rc). Refer
	  to resource.rc in the frame sample for an example.
   
* Updated Dockers
   - Dock targets invalidated by DS_NO_DOCKCHILD_XXXX are hidden or greyed.
   - Click and drag tab swaps to swap them for DockContainers and TabbedMDIs.
   - Parent dockers have a minimum size.
   - Added support for DS_FIXED_RESIZE. Normally dock children are resized 
      proportionally, but with this style the size of dock children is fixed.
   - Dock containers with a single tab can hide the tab.
   - Improved hinting for container within container docking.
 
* Added support for vertical ToolBars and ReBars
   - Vertical ToolBars and ReBars can be themed by CFrame. These are 
      demonstrated in the ReBar and ToolBar samples. 
   
* Updated the samples
   - Added DateTime sample to demonstrate CDateTime and CMonthCalendar. 
   - Added ToolBar sample. It demonstrates customizing ToolBars by dynamically
      adding or removing ToolBar buttons. It also demonstrates an additional
	  ToolBar which can be positioned at the top, bottom, left or right of the
	  view window.
   - Added ReBar sample. It demonstrates an additional ReBar which contains 
      a ToolBar and can be positioned at the top, bottom, left or right of the
      view window.
   - Added StatusBar sample. It demonstrates a colored StatusBar with a
      hyperlink, a progress bar, an icon and an owner drawn part.	  
   - A window menu has been added to the DockTabbedMDI sample.
   - The Themes sample demonstrates how to save a rebar's band sizes and 
      positions in the registry.
   - The Themes sample demonstrates StatusBar themes.
   - The Dock sample demonstrates various dock styles including:
     - Proportional Resize
	 - 3D Border
	 - Disable Undocking
	 - Disable Resizing
	 - Disable Dock closing
	 - Disable docking on the left or right
	 

Changes in detail
-----------------
Added CDockContainer::OnMouseMove
Added CDockContainer::SetHideSingleTab
Added CDockContainer::SwapTabs
Added CDocker::GetViewRect
Added CFrame::DrawReBarBkgnd
Added CFrame::DrawStatusBarBkgnd
Added CFrame::GetStatusBarTheme
Added CFrame::SetStatusBarTheme
Added CTab::GetTabImageID
Added CTab::GetTabText
Added CWinApp::LoadImage
Modified CTabbedMDI::GetTab			 returns CWnd*
Modified CDocker::GetAllDockers      returns pointer to CDocker* vector
Modified CDocker::GetDockChildren    returns pointer to CDocker* vector
Moved ::TintBitmap 					 to CBitmap::TintBitmap
Moved ::GrayScaleBitmap 			 to CBitmap::GrayScaleBitmap
Moved ::CreateDisabledImageList 	 to CImageList::CreateDisabledImageList

Added user defined messages:
UWM_GETFRAMEVIEW:	Used by CFrame.  Returns the view window's HWND 
UWN_DRAWRBBKGND:    Used by CFrame.  Called for ReBar background redrawing
UWN_DRAWSBBKGND:    Used by CFrame.  Called for StatusBar background redrawing
UWN_TABDRAGGED:     Used by CTabbedMDI. Called when a CTab's tab is dragged

Added string resources for frames (defined in resource.rc)
IDW_INDICATOR_CAPS
IDW_INDICATOR_NUM
IDW_INDICATOR_SCRL

Incompatibilities with previous version
---------------------------------------
IDW_INDICATOR_CAPS, IDW_INDICATOR_NUM and IDW_INDICATOR_SCRL string
resources are now used to define the status indicators. They should be
added to resource.rc


Version 7.5.1
=============
Bug Fixes:
* Fixed memory leak in CDIObject
* Hand cursor is now displayed over hyperlink in DialogDemo sample
* Removed flicker for CMenuBar when run on Windows 98


Version 7.5
===========
Bug Fixes:
* The drop-down lists for combo boxes are now displayed correctly.
* Fix for ToolBars on Win95

New Features and Enhancements
-----------------------------
* Added CRichEdit. This class provides support for Rich Edit controls
* Updated the approach to using threads
   - CWinThread is used in place of CThread.
   - CWinApp now inherits from CWinThread.
   - GUI threads are now implemented without multiple inheritance. Refer to
     the Threads and DirectX samples for an example of how to create GUI
	 threads.
   - CWinThread provides a constructor to facilitate worker threads. This 
     constructor allows users to specify the thread's callback function and
     a LPVOID pParams parameter.
   - The thread is now created using the CreateThread member function rather
     than being automatically created in the constructor. This provides more
	 control over if and when the thread is created.
* Updated CWinApp
   - CWinApp now inherits from CWinThread. Some member functions were moved
     from CWinApp to CWinThread.
   - Added wrapper functions for loading and setting the cursor, and loading 
	 icons.	   
* Updated CFrame
   - A keyboard hook is used to retrieve keyboard indicators (NUM, CAPS, SCRL),
     removing the need for a timer. 
   - If the co-ordinates retrieved from registry would place the frame off
     screen, the frame is repositioned.
   - Added GetTitle, SetTitle, GetStatusText and SetStatusText functions.	  
* Updated CDocker and CTab
   - CTabs and CDockers now support the WS_EX_LAYOUTRTL extended style. This
     style creates a window whose horizontal origin is on the right edge to 
	 better suite Arabic and Hebrew languages.
* Updated CDialog
   - Added support for OnIdle in modal dialogs. Modeless dialogs already have
     OnIdle support.  	 
* Updated FromHandle for CWnd, CDC, CBitmap, CBrush, CFont, CPalette, CPen, CRgn, 
   CImageList and CMenu. They have been moved from global to their classes.
* CWnd::FromHandlePernament has been added to retrieve a known CWnd for a HWND.
   Unlike CWnd::FromHandle, this function never creates a new CWnd. It returns
   NULL if the window handle is not found in the map of permanent CWnds.
* Updated the TabDemo and DockTabbedMDI samples. These now demonstrate using a
   dialog as the view window for the tab or docker.   



Version 7.4
===========
	 
New Features and Enhancements
-----------------------------
* Added CImageList. CImageList manages a collection of images (Image List).
* Added ToolBarDemo Sample. 
   - demonstrates ToolBar customization.
   - demonstrates adding and removing ToolBar buttons.
   - demonstrates saving and restoring ToolBar layout.
   - demonstrates changing the ToolBar's image list.
* Updated CWnd:
   - Modified OnCreate. It now provides a LPCREATSTRUCT. Any function overriding
      OnCreate will need to be modified too. 
   - Added OnAttach. It is called when a window is attached to a CWnd.
   - Added OnClose. It is called when a window asks to be closed (WM_CLOSE).
   - Added OnDestroy. It is called when a window is destroyed (WM_DESTROY).
   - CreateWindowEx now uses HMENU or UINT instead of CMenu*. This allows 
      the menu parameter to specify a menu for a parent window, or a window ID
      for a child window.   
* Updated CSocket:
   - now supports WinCE
   - send and receive functions now use char and support binary data.
   - port arguments are now UINT, not LPCTSTR
* Updated CFrame:
   - Frames now use the IDW_READY resource for the "Ready" string.
   - CFrame no longer requires the number of images in the ToolBar bitmap to 
      equal the number of ToolBar buttons. The width of the button bitmap is
      now assumed to be equal to its height or a minimum of 16.
   - The code for ToolBar and MenuBar themes has been moved to CFrame, making it
      easier to customize. Also, the notifications (from WM_NOTIFY) are handled in
	  virtual functions, making them easier to override.   
   - ToolBars for DockContainers automatically use the Frame's ToolBar theme.
   - We can now specify the index of the image in AddToolbarButton.
* Updated CFile:
   - CFile functions are now virtual.
   - OpenFileDialog and SaveFileDialog allow the dialog's title to be specified.
* Updated CToolBar
   - SetButtonInfo can now be used to change a ToolBar button's image and 
      command ID.
   - Functions now use CImageList* instead of HIMAGELIST
   - Added support for ToolBar customization.
   - AddButton now also allows us to specify the image's index.
* Updated CDialog
   - Added GetDefID, GotoDlgCtrl, MapDialogRect, NextDlgCtrl, PrevDlgCtrl
	  and SetDefID.
   - The constructor no longer sets the dialog's parent. The parent of the dialog 
      (if any) is set when the dialog is created (with DoModal or DoModeless).  
* Updated CTab.
   - CTab now provides wrapper functions for all the Tab control macros.


Version 7.3
===========

New Features and Enhancements
-----------------------------
* Adjusted the frame's appearance
	- Updated the visual appearance of popup menus on systems using Windows Aero. On 
	  systems with Aero, popup menus are rendered with Windows Visual Styles. Systems
	  without Aero continue to use the Win32++ theme for popup menus.
	- Frames now honour the current window theme's menu and status fonts.
	- the frame's appearance changes dynamically to reflect changes to the window theme.
	- minor adjustment to the ReBar theme colours for the "Modern" theme.
* Extended CWebBrowser
	The CWebBrower class has been extended to wrap the member functions of
	iWebBrowser2. The Browser sample has been updated and now supports
	Copy/Paste.
* Added the following controls
   - CDateTime
   - CHeader
   - CHotKey
   - CIPAddress
   - CMonthCalendar
   - CTooltip
* CString constructors now accept either ANSI or Unicode characters and converts
   these to TCHAR as required.
* Extended CDC
	The CDC::DetachBitmap function has been added. This provides a convenient
	way of detaching a bitmap from a memory DC created by CreateCompatibleBitmap.
	The various CDC::CreateXXX functions now return void instead of a pointer
	to the old GDI object.


Version 7.2
===========

New Features and Enhancements
-----------------------------
* Added CString class
   The CString class is intended to provide much of the same functionality
   as the CString class provided with MFC/ATL.
* Added CMenu
   The CMenu class is intended to provide much of the same functionality
   as the CMenu class provided with MFC. The library now standardises on
   using pointers to CMenu, instead of HMENU.	
* Added CFile
   This class provides a convenient wrapper for functions dealing with files.
* Added Idle processing.
   The Idle processing is used by the Win32++ library for some internal 
   processing. It is also available for use by users, and is used in much the
   same way as OnIdle processing in MFC.
* Enhanced the CDC class, and added CWindowDC, CClientDC, CMemDC, CPaintDC
   and CMetaFileDC. The creation of the various different types of CDCs has
   been simplified, and the CDC functions now use CDC pointers instead of
   HDCs. These changes improve the compatibility between Win32++ and MFC.
* Enhanced the various GDI object classes, namely CBitmap, CBrush, CFont, 
   CPalette, CPen and CRgn, and added CGDIObject. The library now standardises
   on using pointers to theses classes instead of raw GDI handles (like HPEN).
   These changes improve the compatibility between Win32++ and MFC.


Version 7.1
===========

New Features and Enhancements
-----------------------------
* Added support for Task Dialogs
* Added the following set of GDI classes: CBitmap, CBrush, CFont, CPalette, 
   CPen and CRgn. These work in cooperation with the existing CDC class.
* Added a set of new Text conversion functions based on classes.
   The complete set of functions are:
	A2BSTR		ANSI  to BSTR
	A2OLE		ANSI  to OLE
	A2T			ANSI  to TCHAR
	A2W			ANSI  to WCHAR
	OLE2A		OLE   to ANSI
	OLE2T		OLE   to TCHAR
	OLE2W		OLE   to WCHAR
	T2A			TCHAR to ANSI
	T2BSTR		TCHAR to BSTR
	T2OLE       TCHAR to OLE
	T2W			TCHAR to Wide
	W2A			WCHAR to ANSI
	W2BSTR		WCHAR to BSTR
	W2OLE		WCHAR to OLE
	W2T			WCHAR to TCHAR
   Refer to the help documentation for instructions on using these functions.
* OnEraseBkgnd is now called automatically when a CWnd's background needs
   erasing. Return TRUE to prevent default erasure.
* Scribble Tutorial now demonstrates the use of command line arguments
* Enhanced CResizer.
   - The anchor points are now fixed instead of proportional
   - Scrollbars are now added when required.
   - Added the DialogResizing sample to demonstrate CResizer's new features.
* Create now use a CWnd pointer instead of a HWND when specifying the 
   parent window.
* Dialogs and Property Sheets now use a CWnd pointer instead of a HWND
   when specifying the parent window.
* CTab has been enhanced. The TCS_FIXEDWIDTH and TCS_OWNERDRAWFIXED styles
   are now optional.   
* Extended the CSize, CPoint and CRect classes
* Extended CMDIFrame and CMDIChild. CMDIChild::SetHandles is now used to set
   the MDI child's menu and accelerator table. 
* A docker can now be resized while docked using CDocker::SetDockSize.
* Extended the "Using Win32++ section of the Win32++ help documentation.


Version 7.0
===========

New Features and Enhancements
-----------------------------
* The following function now return CWnd* instead of HWND:
   GetActiveWindow, GetAncestor, GetCapture, GetFocus, GetDlgItem, GetWindow,
   GetLastAtivePopup, GetParent, GetTopWindow, SetActiveWindow, SetCapture, 
   SetFocus, and SetParent.  This helps the framework to be more object
   orientated, by allowing the programmer to work more directly with CWnds.
   It also reduces the need to convert between CWnds and HWNDs in user code.
   If a CWnd object for the HWND doesn't already exist, Win32++ creates a 
   temporary CWnd. The pointers returned by these functions should not be
   stored and used later, as they might not be valid then.
* Added CThread class to simplify the task of using threads and creating
   windows in different threads. CThread can be used for both worker threads
   and GUI threads. Refer to the Thread and DirectX samples for examples of 
   how to use CThread to create windows in a different thread. The DirectX
   sample also uses a customized message loop for the thread.   
* Added the following control wrappers: CAnimation, CComboBox, CComboBoxEx,
   CProgressBar, CScrollBar, CSlider, and CSpinButton.
* Renamed CToolbar to CToolBar, CStatusbar to CStatusBar, CRebar to CReBar
   and CMenubar to CMenuBar. This matches the MFC names, and is also more 
   consistent with Win32++'s naming conventions.   
* Added support for re-sizable dialogs. The CResizer class has been added
   to dialog.h to facilitate dialog resizing. Refer to the forms sample for
   an example of how to put CResizer to use.
* Added IPv6 support to CSocket. The network samples have been updated to
   take advantage of IPv6 support. IP version 6 is supported on Vista 
   operating systems and newer.
* Added Shared_Ptr class. Note that a "shared_ptr" will be available for the
   updated C++ standard. It is already available with some modern compilers,
   and also for users of the Boost library. The "Shared_Ptr" class is intended
   as an alternative for those users who would like to use a "shared_ptr", but
   don't have access to one yet. Unlike auto-ptr's, shared_ptr's can be used
   to safely store pointers in vectors and other STL containers.
* Extended the CToolbar class.
* Added the GDIPlus sample to demonstrate how to use the GDIPlus library 
   provided with modern Windows operating systems (XP and above).
* Win32++ can now be run from inside a DLL. The "DLL" sample demonstrates how to
   put a Win32++ dialog in a dll, and run it from a test program.  
* Dialogs and Property Sheets now use DWLP_MSGRESULT to automatically handle the 
   value returned by notifications in their message handling. This allows a 
   dialog's controls to use custom draw.
* Improved the appearance of frames without themes. The frame sample demonstrates
   how override CMainFrame::OnCreate to customize the frame's appearance.
* Asserts are used more liberally to test for programming errors. Any message
   sent to a non-existent window, for example, will now assert. More asserts 
   are intended to help users write code that is more robust. Note that asserts
   are only evaluated in Debug mode, and have no effect in Release mode.
* Exceptions are thrown less often. They are now thrown to indicate a critical
   problem, outside the programmer's control. Throwing fewer exceptions results 
   in slightly smaller executables, and gives users more flexibility and 
   control over their own exception methodology. They are thrown when:
   - a critical dll cannot be loaded.
   - a window message cannot be routed to a CWnd object.
   - an attempt to read from or write to the registry fails unexpectedly.
* Vectors are now used as a replacement for all dynamically allocated arrays, 
   ensuring the arrays are automatically deleted when they go out of scope.
   Creating an array with "new" runs the risk of causing a memory leak,
   particularly when an exception is thrown. Using a vector to create the
   array guarantees that it will be deleted properly under all circumstances.
* The OnPaint function now uses a CDC reference as its argument instead of a 
   HDC. This simplifies the task of using a CDC when overriding OnPaint.
* Extended the help documentation.   


Version 6.9
===========

New Features and Enhancements
-----------------------------
* Added a WebBrowser class called CWebBrowser.  This class provides a web 
   browser in a window. This class can be used as a view window anywhere 
   view windows are used, such as in frames, dockers, MDI Children, 
   Tabbed MDIs etc.  It has no dependence on ATL, greatly simplifying the 
   approach to adding a browser window to any application.  It can be compiled
   by any of the supported compilers including Dev-C++, MinGW and the Borland 
   compilers as well as the compilers from Microsoft.  
* Added an ActiveX host class called CAXWindow.
* The CTab, CMDITab, CDocker and CDockContainer classes are now flicker free,
   providing a more professional look during resizing and docker moving.
* Improved the dock targeting and dock hinting.   
* Introduced a new set of text conversion functions to convert between Ansi, 
   Unicode and Wide characters.
* CWnd objects can now report their type with GetWindowType.
* Modified the Browser sample to use the new CWebBrowser class. It also 
   demonstrates how to use an event sink to get notification of browser events.
* Added a Tray sample which demonstrates how to create an application 
   which can be minimised to the system tray, and restored.
* The visual editor that ships with VS2008 and VS2010 can now be used to
   modify the resource files (Resource.rc and resource.h) without mangling them.   


Version 6.8
===========

New Features and Enhancements
-----------------------------
* Support has been added for the Windows Ribbon Framework available on 
   Windows 7 operating systems. The RibbonFrame and RibbonSimple samples 
   demonstrates how to implement the ribbon. RibbonFrame reverts back to 
   using the traditional Toolbar and Menubar if the operating system doesn't
   support the ribbon framework.  
* Helper classes have been added for the standard controls, namely the Button,
   Edit, Listbox, and Static controls.
* Dockers can now be hidden and unhidden. Refer to the Splitter sample for a
   demonstration of this feature.
* Modal dialogs now support pretranslated messages.          


Version 6.7
===========

New Features and Enhancements
-----------------------------
* The directory layout of Win32++ has changed. It now contains the following
  folders:
   help             The help for Win32++
   include          The Win32++ library for typical use
   lib              The static library files when they are build
   Library Projects The project files used to build the static library
   new projects     A set of projects to be used in your new projects 
   src              The Win32++ library for building the static library
   tests            A directory which contains the output of some tools
   tools            A set of useful batch files for Win32++ 
* The Win32++ include directory is specified within the project rather than
   hard coded into the source files. To specify a different location for the
   Win32++ files in a project, specify the "Additional Include Directories" for
   both "C/C++" and "Resources". 
* The projects now provide the option of compiling with a static library or
   directly from the file in Win32++\include. To build the static libraries,
   see below. 
* The projects are now configured to take advantage of precompiled headers.
* A set of tools is now provided in the tools folder. They include a set of 
   batch files for compiling the examples and batch files to "clean" them.
* The CDC class has been extended. Several functions have been added, and
  CDC::GetDC has been renamed to CDC::GetHDC.
* Support has been added for Right to Left languages which include Hebrew and 
   Arabic. The CFrame and CDocker classes now honour the WS_EX_LAYOUTRTL 
   extended style used by these languages. To take advantage of this feature,
   use PreCreate to set this extended when using CFrame, CMDIFrame, CTab, 
   CTabbedMDI, and CDocker.  
* OnInitialUpdate is now called after Attach or AttachDlgItem.
* IsChild now takes a HWND argument.
* Win32++ is now available as a single download, rather than a collection of
   files.
* Each program example now has a Readme.txt file which describes what it does,
   and the features it demonstrates.   


Version 6.6
===========

New Features and Enhancements
-----------------------------
* The number of arguments have changed for WndProc and WndProcDefault.
  - The HWND parameter has been dropped in both of these functions. It's
    presence was redundant and possibly confusing. Users will need to modify
    their WndProc and WndProc functions accordingly. If needed, the m_hWnd 
    member variable can be used in place of hwnd within the WndProc function.
* The number of arguments have changed for DialogProc and DialogProcDefault.
  - The HWND parameter has been dropped in both of these functions. It's
    presence was redundant and possibly confusing. Users will need to modify
    their WndProc and WndProc functions accordingly. If needed, the m_hWnd 
    member variable can be used in place of hwnd in the WndProc function.  
* Enhancements to docking, containers and tabs.
  - By default the dockers are immediately resized while the splitter bar is 
     being dragged. To defer resizing until the splitter bar is released, use
     SetDragAutoResize(FALSE).
  - The close and list buttons now indicate when they are hot and pressed.
  - Added SetTabText, SetTabImage and SwapTabs to the CTab class.
  - Minor improvements to the painting of tabs, containers and dockers.
* Enhancements to GDI graphics support.
  - The CDC class has been extended. It now includes wrapper functions for 
     the Device Context related functions.
  - Added the CBitmapInfoPtr class. This simplifies the use of the BITMAPINFO
     structure in functions like GetDIBits and SetDIBits.
  - Added GrayScaleBitmap function to gdi.h. It converts a colored bitmap to
     to gray-scale.     
* Automated menu updating.
  - When a menu is about to be displayed, OnUpdateMenu is called to provide
     an opportunity to modify the check state of the menu items.
* Enhancements to frames
  - The style of the rebarband is now specified in AddToolbarBand. This 
     facilities saving and restoring ToolBar settings from the registry (as 
     demonstrated in the Themes example.)  
  - The Frame's ShowToolbar and ShowStatusbar states are now saved in the
     registry.
* Modification to CRect class
  - The various function now use references instead of naked pointers.    
* Updated the Themes sample.
  - Added check boxes for the various rebar theme option
  - Added Hide/Show option for the additional toolbars
  - Save/Load the theme options in the registry
  - Save/Load the rebar band positions and styles in the registry
* Replaced the Form sample with the DocViewForm sample.
  - This sample now demonstrates a form using a Doc/View architecture, much
     like the traditional Doc/View of MFC. 
  - Added OnUpdateMenu handling. 
* Updated the FastGDI sample.
  - Added gray-scale transformation
  - Added file save.
  - Added Scroll bars.
* Updated the picture sample.
  - Added Scroll bars.  
* Updated the DockContainer and DockTabbedMDI examples    
  - These examples now demonstrate how to theme a container's ToolBar.   
   

Version 6.5
===========

New Features and Enhancements
-----------------------------
* Precompiled Headers
   Samples now demonstrates the use of Precompiled Headers. More experienced
   users might prefer this approach as it provides for much faster compile times.
* Added CTab class. 
   This class is used by CContainer and CTabbedMDI, and can also be used as a
   view window.
* Added TabDemo example.
   Refer to the TabDemo example for a demonstration of how CTab class is
   used as a view window in a frame. TabDialogDemo also uses CTab. 
* Added CTabbedMDI class.
   A TabbedMDI can be used as a view window for a Frame or a Dockable. As the 
   name suggests, it provides tabs for a MDI window. 
* Added TabbedMDI example within docking.
   Refer to the docking TabbedMDI example for a demonstration of how CTabbedMDI
   class is used.   
* Enhancements to docking.
   - Dockers can now be docked into, and undocked from all other dockers, 
     including those that are undocked. 
   - Containers can also be docked into and undocked all from containers,
      including those that are undocked.
   - Containers can display their tabs at the top or bottom of the window.
   - Containers can also display a tab list button.
   - Docker and container objects are destroyed when their window is closed.
   - CContainer::SetupToolbar can be used to specify the ToolBar's resource IDs.
   - Dockers and containers can save their layout in and load their layout from
      the registry.     
* Improvements to toolbars
   - Resource IDs should be specified in SetupToolbar, rather than CMainFrame's
      constructor.
   - Other configurations for the ToolBar such as disabled buttons and alternate
      bitmaps should be specified in SetupToolbar, rather than in OnCreate.
   - Configuration of additional toolbars if any should also be done in
      SetupToolbar.  Refer to the Themes example for a demonstration of this.
   - CToolbar now holds the vector of Resource IDs, which can be retrieved
      with the GetToolbarData function. There is no need to specify a vector
      when adding additional toolbars.
   - There is now no need to specify the number of ToolBar buttons in the
      AddBitmap, ReplaceBitmap, SetBitmap and SetImages functions.
   - The AddToolbarButton can now add a ToolBar button which is initially
      disabled.
   - There is no need to call SetButtons when adding additional ToolBars.
   - Tooltips for all ToolBars in the ReBar are now displayed.      
* MIN and MAX macros have been defined and can be used in place of min and max.
   This avoids incompatibilities between the way different compliers support
   these macros. It also avoids clashes between the macro definitions of 
   min and max, and the STL definitions of min and max.
     
   
Version 6.4
===========

New Features and Enhancements
-----------------------------
* Docking:
  - Added tabbed docking container with optional ToolBar
  - Added close button to the caption of docked windows
  - Added 'outer' docking  i.e. docking at the side of the frame rather 
      than inside another Docker.
  - Added a second docking example demonstrating containers
  - Added save/restore dock layout to docking examples
  - Added Close All Dockables and Default Dock Layout to docking examples
  - Added Win98 and WinME support for docking. 
* Added Region support to CDC class.
* Updated the Notepad sample to handle Unicode text.
* Themes example now demonstrates a ComboBoxEx control in its ToolBar  
 

Version 6.3
===========

New Features and Enhancements
-----------------------------
* Added support for docking.
* Added the Fast GDI demo. This demonstrates the use of the TintBitmap function.
* MDI child windows now require a view window. The use of a view window is 
   now the same for Frames, MDI children, and dockables. The MDI demo example
   has been extended to include ListView and TreeView views.
* Added message translation. This allows modeless dialogs and propertysheets
   to process the tab (and other) keys.
* Added a CWnd::Destroy function. This returns a CWnd back to its default
   state ready to be reused.
* The Frame now stores which child window had focus before it is de-activated,
   and returns focus to this child when the frame application is reactivated.    
     

Version 6.2
===========

New Features and Enhancements
-----------------------------
* Frame applications now store the window size and position in the registry.
   To enable this, set the m_KeyName member variable in CMainFrame's 
   constructor. This member variable can be used to reflect the company name
   and application name, for example:  m_KeyName = _T("SomeCompany\\SomeApp");
* Frame applications now provide a Most Recently Used (MRU) list. This list is 
   stored in the registry.
* Extended CWnd
   CWnd now includes functions which wrap many of the Windows API functions
   that affect to windows. 


Version 6.1
===========

New Features and Enhancements
-----------------------------
* All Win32++ code has been moved to header files.
   This simplifies the use of Win32++. To add Win32++ to a project, simply 
   include the appropriate Win32++ header files in your code. There is no
   longer any need to add the Win32++ files to the project, although doing so
   may still prove useful under some circumstances. Depending on the 
   compiler/IDE used, adding the Win32++ header files to the project may add
   the various Win32++ classes to the class view.
* Added CListView class.
   This class encapsulates the various messages and macros used by the Win32/64 
   API to manage the List-View common control. You can inherit from this class
   when creating your own List-View control in a window, or attaching a 
  List-View control from a dialog.
* Added CTreeView class.
   This class encapsulates the various messages and macros used by the 
   Win32/64 API to manage the Tree-View common control. You can inherit from
   this class when creating your own Tree-View control in a window, or 
   attaching a Tree-View control from a dialog.
* Added CPoint CRect and CSize classes
   The CPoint, CRect and CSize classes can be used anywhere a POINT, RECT
   or CSize struct can be used respectively.
* Extended the CRebar, CToolbar and CStatusbar classes.
* Added support for x64 applications.
   Win32++ can now be used to build 64 bit applications. The manifest file has 
   been modified to support both 32bit and 64bit applications. The new manifest
   should be used for any 64 bit applications that use common controls. Users
   are encouraged to use the modern Win64 API functions like:
   GetWindowLongPtr, SetWindowLongPtr, GetClassLongPtr and SetClassLongPtr.
   Win32++ will convert these back to their Win32 API counterparts if required.
* 32 bit bitmaps are now supported for toolbars (requires XP or Vista)


Version 6.0
===========

New Features and Enhancements
-----------------------------
* Win32++ now also directly supports the Windows CE operating systems. 
   Windows CE is the operating system used on such things as Pocket PCs, 
   embedded systems and SmartPhones. The Win32++ examples for Windows CE
   include the project files for eMbedded Visual C++ 4.0, and Visual 
   Studio 2005. 
* Added Networking support. Win32++ now includes a CSocket class which
   encapsulates much of the Winsock API. This class is capable of monitoring
   network events, such as connection requests from clients, and notification
   that the socket has data ready to be received. Command line and dialog
   examples are provide to demonstrate how the class can be used to create
   TCP/IP (and UDP/IP) servers and clients.
* Added a CDC class. This class simplifies the drawing to device contexts. 
   This class can be used anywhere we would normally use a handle to a 
   device context (HDC). Its features include:
   - Automates the selection of GDI objects into the device context.
   - Automates the destruction of GDI objects.
   - Automates the deletion or release of the device contexts.
* PreRegisterClass can now be used to set the WNDCLASS parameters before the
   window class is registered. This provides a convenient way to set a window's
   background brush or cursor. 
* Improvements to tracing. It now uses OutputDebugString to send the trace
   output the debug/output pane of the various IDE's. This is now also 
   compatible with debuggers, should you choose to use them.
* Automatically detects the XP theme used (Default, Silver or Olive), and
   adjusts the theme colors accordingly.   
* Enhanced the tutorial. It now also demonstrates file operations and printing.

  
Version 5.6
===========
* Property Sheets are now supported. The files PropertySheet.cpp and 
   PropertySheet.h have been added to Win32++. These files define the 
   CPropertySheet and CPropertyPage classes. The Property sheet generic 
   demonstrates the following:
  - Modal property sheets.
  - Modeless property sheets.
  - Wizards.    


Version 5.5
===========
* Added Menubar theme support
  - Gradient background for hot buttons (any two colors)
  - Gradient background for pressed buttons (any two colors)
  - Gradient Sidebar for menu items based on pressed button colors.
  - A border color for Menubar buttons and selected menu items


Version 5.4
===========
* Added Rebar themes, including:
  - Gradient background for the rebar control (any two colors)
  - Gradient background for the rebar bands (any two colors)
  - The Menubar can be locked in place.
  - The bands can be kept left.
  - Short bands
  - Bands can have rounded borders
  - Bands with rounded borders can have a flat style
* Added Toolbar themes, including:
  - Gradient background for hot buttons (any two colors)
  - Gradient background for pressed buttons (any two colors)
  - Colored outline for hot and pressed buttons (any color)
* Built in support for multiple toolbars (in rebars) with AddToolbarBand
* Added Forms example
* Added Themes example


Version 5.3
===========
* Owner drawn drop down menu items with icons.  CMenubar::SetIcons is
   used to determine which menu items display an icon. By default, the
   framework uses the ToolBar's bitmap and resource IDs for displaying 
   icons. Override CFrame::SetButtons to change this behavior.
* Automatic subclassing for all windows controls such as List-View, 
   ToolBar, Richedit etc.

   
Version 5.2
===========
* Added a separate HINSTANCE for resources. This provides for multilingual
   support, when resources are loaded via a DLL.
* Added the Internet Browser example. It demonstrates how to host an ActiveX
   control in a Win32++ window.
* Added the Performance example. This program now also conducts a simple 
   performance test to measure the efficiency of the message handling. 

   
Version 5.1
===========
* Existing windows can be subclassed and converted to CWnd objects using Attach
* Dialog items can be sublcassed and converted to CWnd objects, using 
   AttachDlgItem.
* Improvements to CToolbar. The ToolBar uses image lists which support using 
  separate bitmaps for normal, hot and disabled buttons. Text can be added
  to ToolBar buttons, and the style can be set.
* Improvements to CStatusbar.  
* Notifications from common controls are reflected back to the CWnd object that
  generated them. 
* Messages from old style common controls are reflected back to the CWnd object
  that generated them.
  

Version 5.0
===========
* Added rebars to the frame window
* Added a menubar to the frame window
* Added MDI frame support
* Added splitter window support


Version 4.0
===========
* Changed the method of associating the Window's handle (HWND) and 
   the CWnd pointer.  Previously SetWindowLong was used to store the 
   CWin pointer in the windows data area. Now std::map is used to 
   associate a CWnd pointer with the HWND (i.e. the window's handle).   
* Added the lpParam parameter to both versions of the CWnd::CreateEx
   function.  Users are now free to use lpParam for their own 
   purposes. This parameter defaults to NULL for backwards 
   compatibility.
        

Version 3.0
===========
* Added Tracing. To use tracing, ensure that you are in Debug mode, 
   i.e. the variable _DEBUG is defined, and use the TRACE("xxxxx")
   function to send trace messages.
* Enhanced the error reporting in the event of an exception. The 
   GetLastError information is now decoded and displayed if it 
   provides any additional information.
* Added support for multi-threaded applications.    
    

Version 2.0
===========
* The code is now Unicode compliant.
* Added CWinApp class to start Win32++.
* Added CDialog class to support modal and modeless dialogs as well
   as indirect dialogs (dialogs created from a dialog template in
   memory).
* Added the Create function to simplify window creation.
    

Version 1.0
===========
Initial Release