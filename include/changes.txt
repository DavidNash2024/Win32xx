Version 10.1
============
This version updates the library and samples to make better use of the new
features in C++14. Some deprecated classes and functions have been removed.
Dialogs with RichEdit controls might need to be updated to be compatible
with this version.
 

Incompatibilities with previous versions
----------------------------------------
* Support for RichEdit controls in dialogs have changed. Dialogs which have a
  RichEdit control now need to specify "RichEdit50W" as the control's class
  name in the dialog's resource script (resource.rc) if they depend on the
  RichEdit dll loaded by CRichEdit.

  The relevant entry for the richedit control might look something like this:
  CONTROL     "",IDC_RICHEDIT1,"RichEdit50W" ,ES_MULTILINE | ES_WANTRETURN |
              ES_AUTOHSCROLL | WS_BORDER | WS_TABSTOP, 120, 142, 84, 35

  The dialog won't be created if an incorrect class name is specified for
  the richedit control. The "RichEdit50W" class name supports both ANSI
  and UNICODE builds.


New Features and Enhancements
-----------------------------
* Updated CRichEdit.
  The CRichEdit class has been updated and now only loads the latest version
  of the rich edit control (Msftedit.dll). The class name of the RichEdit
  control loaded by CRichEdit is "RichEdit50W".

* Updated the DLL sample.
   The DLL sample now demonstrates how to create modeless dialogs in 
   separate threads. The thread stops running when the dialog is closed.

* The Win32xx::Shared_Ptr class has been removed.
   The deprecated Win32xx::Shared_Ptr class has been removed from Win32++.
   Use either std::unique_ptr or std::shared_ptr instead of
   Win32xx::Shared_Ptr.

* Updated CString and CStringT.
   Added move constructors and move assignments to CString and CStringT.

* Updated CPrintDialog.
   CPrintDialog now displays the classic print dialog by default. To display
   the modern print dialog available on Windows 10 and 11, remove the 
   PD_ENABLEPRINTHOOK flag. This can be done as follows:
   CPrintDialog PrintDialog(0);


Changes in detail
-----------------
 - Added CString::CString(CString&& str)             CString move constructor
 - Added CString::operator=(CString&& str)           CString move assignment
 - Added CStringT::CStringT(CStringT&& str)          CStringT move constructor
 - Added CStringT::operator=(CStringT&& str)         CStringT move assignment

Removed the following deprecated classes and functions: 
 - Shared_Ptr                  class    - use unique_ptr or shared_ptr instead.
 - CFrameT::IsRebarSupported   function - not required, always TRUE.
 - CSocket::StartAsync         function - use CSocket::StartEvents instead.
 - CToolBar::AddBitmap         function - use CToolBar::SetImageList instead.
 - CToolBar::AddReplaceBitmap  function - use CToolBar::SetImageList instead.
 - CToolBar::ReplaceBitmap     function - use CToolBar::SetImageList instead.
 - ::GetSizeofMenuItemInfo     function - use sizeof(MENUITEMINFO) instead.
 - ::GetComCtlVersion          function - not required for Windows XP and later.
 

Version 10.0
============
This version updates the library to utilize features available in C++11 and
C++14. Win32++ now uses the unique_ptr and shared_ptr smart pointers. These
smart pointers are used in place of Shared_Ptr when adding new instances of
CTab, CMDIChild, CPropertySheet and CDocker.

There is now no requirement to use any raw pointers when allocating memory in
code that uses the Win32++ library. Users of Win32++ are now free to avoid 
the use of both new and delete, and instead wrap all memory allocations in
smart pointers. This helps to avoid memory leaks and improve exception safety
in code that uses Win32++.

The C++ compilers that Win32++ supports have changed. Older compilers that
don't support C++14 are no longer supported.

Win32++ version 10.0 only supports the Windows XP and later operating systems. 
Win32++ version 9.6.1 is the latest version to support the operating systems
older than Windows XP. Win32++ version 9.6.1 supports Win95 through to
Windows 11.


Incompatibilities with previous versions
----------------------------------------
The following functions now return a unique_ptr instead of a raw pointer:
* CDocker::NewDockFromID
* CTabbedMDI::NewMDIChildFromID

Code that overrides of these function need to return a unique_ptr as well.
For example:

  DockPtr CMainFrame::NewDockerFromID(int /*id*/)
  {
      DockPtr docker;
      switch(id)
      {
      case ID_CLASSES:
          docker = std::make_unique<CDockClasses>();
          break;
      case ID_FILES:
          docker = std::make_unique<CDockFiles>();
          break;
      default:
          TRACE("Unknown Dock ID\n");
          break;
      }
      return docker;
  }


New Features and Enhancements
-----------------------------
Users can now add new instances of the following classes as smart pointers instead
of raw pointers for CDocker, CMDIChild, CPropertySheet and CTab.

Other changes include:
 * Updated CDocker. Each new CDocker object is stored as a unique_ptr.
 * Updated CMDIFrame. Each new CMDIChild is stored as a unique_ptr.
 * Updated CMDITab. Each new CMDITab object stored as a unique_ptr.
 * Updated CPropertySheet. Each new CPropertyPage object is stored as a unique_ptr.
 * Updated CTab. Each new CTab object is stored as a unique_ptr.
 * Updated CDC. CDC now uses a shared_ptr for its reference counting.
 * Updated CGDIObject. CGDIObject now uses a shared_ptr for its reference counting.
 * Updated CMenu. CMenu now uses a shared_ptr for its reference counting.
 * Updated CImageList. CImageList now uses a shared_ptr for its reference counting.

* The values for WINVER and related macros are now set to values suitable for 
  Windows 10 and Windows 11 by Win32++. Specifying different values for these macros
  before including wincore.h is no longer supported. Win32++ version 10 supports
  all operating systems Windows XP and later irrespective of the values of these
  version macros. 


Changes in detail
-----------------
Added CFrameT::SetMenuFont
Added CFrameT::SetStatusBarFont

Added CDocker::AddDockedChild    - additional override for std::unique_ptr
Added CDocker::AddUndockedChild  - additional override for std::unique_ptr
Added CMDIFrameT::AddMDIChild    - additional override for std::unique_ptr
Added CPropertySheet::AddPage    - additional override for std::unique_ptr
Added CTab::AddTabPage           - additional override for std::unique_ptr
Added CTabbedMDI::AddMDIChild    - additional override for std::unique_ptr

Modified CDocker::NewDockFromID  - returns a std::unique_ptr
Modified CTabbedMDI::NewMDIChildFromID - returns a std::unique_ptr

The type definitions for the smart pointers is in Win32++ have been updated 
as follows:
  using DockPtr = std::unique_ptr<CDocker>;
  using EnhMetaDataPtr = std::shared_ptr<EnhMetaFileData>;
  using MDIChildPtr = std::unique_ptr<CMDIChild>;
  using MenuItemDataPtr = std::unique_ptr<MenuItemData>;
  using MetaDataPtr = std::shared_ptr<MetaFileData>;
  using PropertyPagePtr = std::unique_ptr<CPropertyPage>;
  using TLSDataPtr = std::unique_ptr<TLSData>;
  using WinThreadPtr = std::unique_ptr<CWinThread>;
  using WorkThreadPtr = std::unique_ptr<CWorkThread>;
  using WndPtr = std::unique_ptr<CWnd>;


Deprecated features
-------------------
The following parts of Win32++ are deprecated and might be removed in future
versions of Win32++. Code that uses deprecated features should be updated.

 * Shared_Ptr                  class    - use unique_ptr or shared_ptr instead.
 * CFrameT::IsRebarSupported   function - not required, always TRUE.
 * CSocket::StartAsync         function - use CSocket::StartEvents instead.
 * CToolBar::AddBitmap         function - use CToolBar::SetImageList instead.
 * CToolBar::AddReplaceBitmap  function - use CToolBar::SetImageList instead.
 * ::GetSizeofMenuItemInfo     function - use sizeof(MENUITEMINFO) instead.
 * ::GetComCtlVersion          function - not required for Windows XP and later.
 * MIN and MAX macros          function - use std::min and std::max instead. 

Supported Compilers
-------------------
The following compilers are supported by this version of Win32++:

The modern GNU C++ compilers from the following projects:
 * MinGW
 * TDM-GCC    (ships with Code::Blocks and Embarcadero Dev-C++)
 * MinGW-w64  (the latest GNU C++ compilers available)

Visual Studio Community 2015
Visual Studio Community 2017
Visual Studio Community 2019
Visual Studio Community 2022

Embarcadero C++ Community Edition (Rad Studio 11)

Code for Windows XP can be compiled with Visual Studio Community 2015 and the GNU compilers.


Version 9.6.1
=============
This version contains minor updates to CDocker and the docking samples.


Version 9.6
===========
This version adds support for std::min and std::max. The MIN and MAX macros
are now deprecated. Users should use std::min and std::max in place of the
MIN and MAX macros.

Support has been added for the C++ compiler from Embarcadero.

This version also adds the ScintillaDemo sample. Scintilla is a free source code
and text editing component. On Windows, Scintilla is a Windows control that can be
as a direct replacement for a RichEdit control. Scintilla has a number of features
missing RichEdit controls and has better support for printing.

Scintilla can be downloaded from:
https://www.scintilla.org/ScintillaDownload.html

New Features and Enhancements
-----------------------------
 * Added support for the C++ compilers from Embarcadero. 
    The samples include the project files for C++Builder 11 Community Edition
    from Embarcadero.
 
 * Added support for std::min and std::max.

 * The MIN and MAX macros are are now deprecated and will be removed in future
    versions. Users should use std::min and std::max in place of the MIN and
    MAX macros.

 * Added the ScintillaDemo sample.
    This sample demonstrates how to use the Scintilla control with Win32++
    to develop a simple text editor.

* The samples now use larger icons.
    Larger icons are suitable for applications that are placed on the desktop
    on higher resolution monitors.

Changes in detail
-----------------
Added:   CString::Append
Added:   CTab::SetTabIcon         Additional overload.

Added:   ScintillaDemo sample.

Added    Support for std::min and std::max.
Removed: Support for Visual Studio 6.


Version 9.5.2
=============
This version updates CString, CTime and the dock samples.

New Features and Enhancements
-----------------------------
 * Updated CString.
    The CString constructor, operator+, operator+=, and operator<< overloads
    now support CStringA and CStringW arguments in addition to the arguments
    supported previously.
 * Updated ToCString.
    ToCString now supports CStringA and CStringW arguments in addition to the
    arguments supported previously.
 * Updated CTime.
    Some CTime constructors have been updated, and others removed.
 * Updated the docker samples to eliminate jitter when the dockers are resized.

Changes in detail
-----------------
Added:  tm* ::GMTime(tm& atm, const time_t& t)              global function
Added:  tm* ::LocalTime(tm& atm, const time_t& t)           global function

Added CFrameT<T>::RemoveKbdHook()

Added:  CStringA operator+(const CStringA& string1, const CStringA& string2)
Added:  CStringW operator+(const CStringW& string1, const CStringW& string2)

Added:  CString(const CStringA& str)
Added:  CString(const CStringW& str)
Added:  CString& operator=(const CStringA& str)
Added:  CString& operator=(const CStringW& str)
Added:  CString operator+(const CString& string1, const CStringA& string2)
Added:  CString operator+(const CString& string1, const CStringW& string2)
Added:  CString operator+(const CStringA& string1, const CString& string2)
Added:  CString operator+(const CStringW& string1, const CString& string2)

Added:  CString& operator+=(const CStringA& str);
Added:  CString& operator+=(const CStringW& str);

Added:  CString ToCString(const CStringA& string)
Added:  CString ToCString(const CStringW& string)
Added:  CString ToCString(const CString& string)

Modified: CTime(int year, int month, int day, int hour, int min, int sec, int isDST = -1);
Modified: CTime::GetDayOfWeek    Now returns value in the range 1 through 7

Removed: CTime(UINT yr, UINT mo, UINT wkday, UINT nthwk, UINT hr, UINT min, UINT sec, int isDST = -1);
Removed: CTime(UINT yr, UINT doy, UINT hr, UINT min, UINT sec, int isDST = -1);

Removed: time_tm typedef
Removed: timespan_t typedef

Removed: CString::Left                    redundant
Removed: CString::Mid                     redundant
Removed: CString::right                   redundant
Removed: CString::SpanExcluding           redundant
Removed: CString::SpanIncluding           redundant
Removed: CString::Tokenize                redundant


Version 9.5.1
=============
This version has minor improvements to CDocker, CDockContainer and
CResizer, and adds support for MinGW-w64 version 13.2.0.

New Features and Enhancements
-----------------------------
* Updated CDocker and CDockContainer.
   The dock hinting displayed when a docker is over a dock target has been
   updated.
* Updated CResizer.
   The scroll positions are retained when the window's DPI changes.
* Updated the Docker, DockContainer and DockTabbedMDI samples.
   The DockContainer sample demonstrates how to prevent the frame's last
   container from being undocked or closed.
* Adds support for MinGW-w64 version 13.2.0.

Changes in detail
-----------------
Added CDockContainer::UndockContainerGroup
Added CResizer::OnAfterDpiChange
Added CResizer::OnBeforeDpiChange
Removed CDocker::OnWindowPosChanging
Removed CTabbedMDI::OnDpiChangedBeforeParent


Version 9.5
===========
This version adds a CustomPrintDlg sample. This sample provides an
alternative to the PrintDlg and PrintDlgEx common dialogs which have had 
their functionality downgraded in Windows 11.

New Features and Enhancements
-----------------------------
* Added the CustomPrintDlg sample to provide an alternative to PrintDlg
  and PrintDlgEx.
* Added a new feature to the Themes sample. This sample now demonstrates 
  how to specify the window's caption color on Windows 11.
* CComboBoxEx, CHeader, CListView, CToolbar, and CTreeView now manage their
  own image lists. There is no longer any need to keep a local copy of the
  image list assigned to these controls to keep the image list in scope.
* Updated CImageList.
* Updated CTab and the TabDemo sample.
* Optimized the redrawing of frames and dockers when moving windows between
  monitors with different display settings.
* Simplified support for additional toolbars in frames.

Changes in detail
-----------------
Added CDockContainer::SetTabsFontSize
Added CDockContainer::SetTabsIconSize
Added CFrameT::SetToolBarImages       Added overload for additional toolbars
Added CImageList::CreateDragImage
Added CPrintPreview::CPrintPreview    Additional constructor
Added CTab::SetTabsFontSize
Added CTab::SetTabsIconSize
Added CWinApp::GetHDevMode
Added CWinApp::GetHDevNames
Added CWinApp::ResetPrinterMemory
Added CWinApp::UpdateDefaultPrinter
Added CWinApp::UpdatePrinterMemory

Modified CDockContainer::SetTBImageList        removed CImageList& argument
Modified CDockContainer::SetTBImageListDis     removed CImageList& argument
Modified CDockContainer::SetTBImageListHot     removed CImageList& argument
Modified CFrameT::SetTBImageList               removed CImageList& argument
Modified CFrameT::SetTBImageListDis            removed CImageList& argument
Modified CFrameT::SetTBImageListHot            removed CImageList& argument
Modified CComboBoxEx::SetImageList             returns CImageList
Modified CHeader::SetImageList                 returns CImageList
Modified CListView::SetImageList               returns CImageList
Modified CTab::SetImageList                    returns CImageList
Modified CToolBar::SetDisableImageList         returns CImageList
Modified CToolBar::SetHotImageList             returns CImageList
Modified CToolBar::SetImageList                returns CImageList
Modified CTreeView::SetImageList               returns CImageList

Removed CTab::SetTabHeight
Removed the PrintDialogEx sample
Removed the MDIDockFrame sample


Version 9.4
===========
This version adds support for the Microsoft Edge browser.
The EdgeBrower and EdgeBrowserEx samples have been added. These samples
demonstrate how to use the Microsoft Edge WebView2 control in a Win32++
application.

New Features and Enhancements
-----------------------------
* Added the EdgeBrowser sample. This sample uses the Microsoft Edge
  WebView2 control to render the Microsoft Edge browser in a window. It
  demonstrates a simple way to render a Microsoft Edge browser in a view
  window.

* Added the EdgeBrowserEx sample. This sample uses the Microsoft Edge WebView2
  control to display tabs and render the Microsoft Edge browser within those
  tabs. This sample also demonstrates features such as managing favourites
  and browser history.

* Updated CDC. CDC::SelectObject now keeps the selected object in scope. There
  is no longer any need to select the old object back into the device context
  when SelectObject is used.


Version 9.3
===========
This version improves the support for high resolution monitors by automatically
adjusting the size of the frame's toolbar bitmaps and menu icons appropriately.
A number of functions have been added to make supporting high resolution
monitors easier (see below). 

This version also provides support for per-monitor(v2) DPI awareness.
Per-monitor DPI awareness allows applications to maintain their visual quality
when they are moved between monitors with different Dots Per Inch (DPI)
settings.

The new FrameEx sample demonstrates the use of PNG resources instead of bitmap
resources for the toolbar and menu images. 

New Features and Enhancements
-----------------------------
* The toolbar bitmaps are automatically scaled up to a size appropriate for
  the frame window's DPI. Bitmaps that are appropriate for lower resolution
  monitors are be scaled up for use on higher resolution monitors without
  a noticeable loss of visual quality.

* The menu icon bitmaps are automatically scaled up to fit the menu item.
  Note that menu icon bitmaps are not scaled down to fit the menu item, as 
  that would result in poor image quality. If the menu item images specified
  in the frame's SetupMenuItemIcons are too big to fit in the menu item,
  the menu icons are not displayed.

* Frames support per monitor DPI awareness by resizing themselves to the 
  size recommended by the WM_DPICHANGED message in the OnDpiChanged function.
  They also automatically adjust the toolbar images, menu icons, and statusbar
  fonts when the frame window is moved between monitors with different DPI
  settings.  

* Dockers and docking frames call OnDpiChanged and OnDpiChangedBeforeParent
  in response to WM_DPICHANGED and WM_DPICHANGED_BEFOREARENT to rearrange
  dockers after a DPI change occurs. View windows should handle the
  WM_DPICHANGEDBEFOREPARENT message if they need to account for DPI 
  changes.  
  
* CResizer supports per monitor DPI awareness by repositioning the child
  windows when the WM_DPICHANGED or WM_DPICHANGED_BEFOREPARENT message is
  handled.

* Added the FrameEx sample.
  The FrameEx sample uses PNG images instead of bitmaps for the toolbar 
  and menu item images. As PNG images scale better than bitmaps, this approach
  is better for applications supporting Per Monitor DPI and high resolution
  monitors.

About high resolution monitor support
-------------------------------------
Modern monitors can now use scaling factors of 400% or more. Applications that
look good with scaling factors of 100% or 150% may not look good at higher
scaling factors. It will often be necessary to adjust the image-list for
list-view and tree-view controls and adjust the fonts used by other windows
to cater for larger scaling factors.

Win32++ provides the following functions for high resolution monitor support.
::GetWindowDpi
CWnd::DpiScaleFont
CWnd::DpiScaleInt
CWnd::DpiScaleLogFont
CWnd::DpiScaleRect
CWnd::DpiScaleUpBitmap

The GetWindowDpi function retrieves the window's current DPI. We can also
call GetWindowDpi(HWND_DESKTOP) to retrieve the system DPI, and the desktop's
DPI when per monitor dpi awareness is enabled.

The various DpiScaleXXX functions take values that are appropriate for a 
a scaling factor of 100% and scale them up to the appropriate values for
the current window's Dots Per Inch (DPI).

About per monitor dpi aware v2
------------------------------
Per monitor dpi aware v2 is a feature that allows applications to maintain
their visual quality when moved between monitors with different DPI settings.
Applications may appear blurry when moved between monitors with different DPI
settings unless per monitor dpi aware v2 is enabled. Per monitor dpi aware v2
is supported on later versions of Windows 10 and Windows 11.

To add per-monitor dpi aware v2 to your application, use a manifest that
includes the per monitor dpi aware v2 entry, such as "PerMonitorV2.manifest"
provided in many of the samples. The manifest should be specified in the
application's resource script, often called "resource.rc". You may also need
to handle the WM_DPICHANGED_BEFOREPARENT message in view windows if they 
require special DPI handling.

If per monitor dpi aware v2 is enabled, a WM_DPICHANGED message is sent to the
top level windows after the DPI change occurs. That usually occurs when the 
window is moved between monitors, but can also occur as a result of a settings
change. A WM_DPICHANGED_BEFOREPARENT to all of the top level window's child and
descendant windows before the WM_DPICHANGED message is sent. A 
WM_DPICHANGED_AFTERPARENT message is is sent to all of the top level window's
child and descendant windows After the WM_DPICHANGED is sent.

The following messages are sent when the application's manifest specifies per
monitor dpi aware V2:

WM_GETDPISCALEDSIZE
Sent to the top level window before the DPI change occurs. The WPARAM
contains the new DPI.

WM_DPICHANGED
Sent to top level windows after a DPI change occurs. The LPARAM contains a 
pointer to rect that provides the suggested new size of the window. 

WM_DPICHANGED_BEFOREPARENT
Sent before the DPI change to all child windows and descendants of the top
level window that is undergoing a DPI change.

WM_DPICHANGED_AFTERPARENT
Sent after the DPI change to all child windows and descendants of the top
level window that is undergoing a DPI change.

WM_SETTINGCHANGE
Sent when the user manually changes the display settings.


Version 9.2
===========
This version provides support for dark mode and provides a sample
that demonstrates how to implement dark mode for a frame application.

New Features and Enhancements
-----------------------------
* Added support for colored text in the status bar.
  CFrame now uses owner draw to render the status bar, allowing different
  colored text to be displayed. The StatusBarTheme struct has been extended
  to allow the status bar text color to be specified. The Themes sample 
  demonstrates the use of different colored text in the status bar.

* Added support for dark mode.
  CFrame now provides support for dark mode by providing the option to use a
  dark menu. This can be used to develop an application with an appropriate
  visual style for dark mode when combined with a black Win32++ theme. Refer
  to the black theme in the Themes sample, and also the DarkMode sample.

* Added the DarkModeFrame sample.
  This samples demonstrates how to make a Win32++ application dark mode aware.
  It uses the Windows App API which is an optional feature that can be 
  installed with Visual Studio Community 2022. This sample detects when the
  Windows theme is using dark mode, and adjusts the frame's theme accordingly.
  The sample also uses a dialog that supports dark mode to display the 
  information about the application. 
  This samples requires Windows 10 or later.


Version 9.1
===========
This version improves support for high resolution monitors by accepting a
range of icon sizes used for menus, tab controls and dock containers.

New Features and Enhancements
-----------------------------
* Updated the images for menus used by CFrame and CDockFrame.
  - Win32++ now supports a range of image sizes displayed in the popup menu for
    CFrame and CDockFrame. The GetMenuIconHeight function returns the
    appropriate height of these images in pixels (16, 24, 32 etc.). The 
    framework will automatically scale the toolbar images down to a size
    suitable for the popup menu for the toolbar bitmap with a resource ID of
    IDW_MAIN. Alternatively you can provide icons with multiple image sizes as
    demonstrated in the samples.

* Updated the ListView sample.
  - An edit control has been added to provide support the in-place editing of
    the List-View's and subitems. A List-View control doesn't have built-in
    support for the editing of subitems.
  - Support for sorting by column has been added. To sort a column in ascending
    or descending order, click on the column in the list-view's header.


Version 9.0
===========
This version provides a major update to the framework. Changes include updates to CString and thread support.
The following samples have been added:
 * DialogTemplate sample
 * PrintDialogEx sample
 * Titlebar sample
 * TitlebarFrame sample

New Features and Enhancements
-----------------------------
* Updated thread support. Thread classes now use the CThreadT class template.
  Threads that support windows continue to use CWinThread. Worker threads now
  use CWorkThread. 
  CWinThread inherits from CThreadT<CMessagePump>.
  CWorkThread inherits from CThreadT<CObject>.

* The values for WINVER and related macros now default to values suitable for 
  Windows 10 and Windows 11. Different values can be specified before including
  wincore.h if required. These values can be specified in stdafx.h by including
  targetver.h as shown in the samples. Visual Studio 6 will require WINVER to
  be set to values appropriate for Win95 or Win98.

* Updated CDialog
  Added a default constructor. Use either the SetDialogTemplate, 
  SetDialogResource or SetDialogFromID functions to specify the dialog if the
  default constructor is used.

* Updated the MenuTheme struct.
  A clrText member has been added to the MenuTheme struct to define the color of
  menubar text. This is now used to set the menubar text color to white for the
  BLACK theme in the themes sample.

* Added the DialogTemplate sample.
  This sample demonstrates how to search for the resources embedded in a
  windows executable or dll file. The user can select a dialog from the list
  of dialogs found in the file. The dialog template of the selected dialog is
  displayed in a rich edit view as an unsigned char array in a manner that can
  be saved to a header file. The program then creates the dialog from the 
  displayed dialog template and displays it.

* Added the PrintDialogEx sample.
  This sample upgrades the Notepad sample. Where the Notepad sample used
  CPrintDialog to display the print dialog, this sample uses CPrintDialogEx
  to display the print dialog. This sample supports printing individual
  pages, as well as multiple page ranges. It also supports printing multiple
  copies, with or without collating. A footer displaying the page number is
  added to the bottom of the printed page.

* Added the Titlebar sample.
  This sample demonstrates how to customize the title bar of a window. It sets
  the title bar's color and draws the minimize, maximize and close buttons.
  The sample uses CMenuBar to display a menu in the title bar.

* Added the TitlebarFrame sample.
  This sample demonstrates how to use a customized title bar with a frame.
  It demonstrates the frame in two modes: mini-frame and full-frame.


Version 8.9.1
=============
This version provides a minor update to the framework, and adds CPrintDialogEx.


Version 8.9
===========
This version adds support for the Clang compiler, and improves the handling
of error messages.


Version 8.8
===========
This version adds the BrowserATL, MovieShow and WinPlot samples. It also adds
support for Code::Blocks version 20.03.


Version 8.7
===========
This version adds print preview support to the framework, and support for
Microsoft Visual Studio Community 2019.

The following classes have been added:
* CPrintPage
* CHGlobal
* CGlobalLock


Version 8.6
===========
This version updates networking and adds the following classes:
 * CEvent
 * CMutex
 * CCSemaphore


Version 8.5
===========
This version updates the frames and adds the following classes:
 * CFileFind
 * CFolderDialog
 * CMetaFile
 * CThreadLock

The following samples have also been added:
 * Direct2D
 * FilePrintPreview
 * StatusBarEx


Version 8.4
===========
This version of Win32++ introduces class templates to provide the different
types of frames. Frames can support a Single Document Interface (SDI) or a
Multiple Document Interface (MDI) with or without docking and with or without
a ribbon. Each of these optional features are provided using class templates.

The following classes have been added to the framework:
 * CFrameT
 * CMDIFrameT
 * CRibbonFrameT
 * CScrollView
 * CMetaFile
 * CEnhMetaFile
 * CMetaFileDC
 * CEnhMetaFileDC


Version 8.3
===========
This version adds a Print Preview sample and updates to the following classes:
 * CString
 * CFrame
 * CMDIFrame
 * CDocker
 * CDC
 * CPropertyPage


Version 8.2
===========
This version adds support for common dialogs. The following classes have been added:
 * CColorDialog
 * CFindReplacDialog
 * CFileDialog
 * CFontDialog
 * CPrintDialog
 * CPageSetupDialog


Version 8.1
===========
This version adds Dialog Data Exchange (DDX), extends CString, and adds a set
of new exceptions inherited from CException.


Version 8.0.1
==============
This version adds support for system DPI (Dots Per Inch) aware.


Version 8.0
===========
This version adds CArchive, CObject, CRegKey, CTime and CTimeSpan to the library.
The header files for Win32++ have been renamed, and are now proceeded with "wxx_".


Version 7.9
===========
This version of Win32++ moves away from the use of pointers. Where before we
would use pointers to objects in Win32++ function calls, we now use the objects
directly.

The following classes are now referenced counted and release the resource
they manage when the last copy goes out of scope:
 * CBitmap
 * CBrush
 * CDC
 * CFont
 * CPalette
 * CPen
 * CRgn
 * CMenu
 * CImageList


Version 7.8
===========
This version provides an update to the CDC class.


Version 7.7
===========
This version adds docking support to frames and MDI frames.
Frames now load the show state (maximized or normal) when the application
starts.


Version 7.6
===========
This version provides an update to Dockers and Frames.
Other changes include:
 * Added StatusBar themes.
 * Switching between views is now supported, using SetView
 * Added support for vertical ToolBars and ReBars


Version 7.5
===========
This version adds the CRichEdit class.
The following classes have also been updated:
 * CWinApp
 * CFrame
 * CDocker
 * CTab
 * CDialog


Version 7.4
===========
This version adds the CImageList class and the ToolBarDemo sample.
The following classes have also been updated:
 * CDialog
 * CFrame
 * CFile
 * CSocket
 * CTab
 * CToolBar
 * CWnd


Version 7.3
===========
This version enhances the appearance of frame menus on Vista and Windows 7.
The following classes have also been added:
 * CDateTime
 * CHeader
 * CHotKey
 * CIPAddress
 * CMonthCalendar
 * CTooltip


Version 7.2
===========
This version adds support for idle processing, and adds the following classes:
 * CString
 * CMenu
 * CFile


Version 7.1
===========
This version adds support for text conversions between ANSI and Unicode.
The following classes have also been added:
 * CTaskDialog
 * CBitmap
 * CBrush
 * CFont
 * CPalette
 * CPen
 * CRgn


Version 7.0
===========
This version adds multi-thread support to the framework, and adds IPv6 support
to CSocket. The following classes gave also been added:
 * CAnimation
 * CComboBox
 * CComboBoxEx
 * CProgressBar
 * CScrollBar
 * CSlider
 * CSpinButton
 * CThread
 * Shared_Ptr


Version 6.9
===========
This version adds a WebBrowser class called CWebBrowser. This class provides
a web browser in a window. This class can be used as a view window anywhere
view windows are used, such as in frames, dockers, MDI Children, Tabbed MDIs
etc. It is demonstrated by the Browser and DockTabbedMDI samples.


Version 6.8
===========
This version adds support for the Windows Ribbon Framework.
The following classes have been added:
* CButton
* CEdit
* CListBox
* CStatic
* CRibbon
* CRibbonFrame


Version 6.7
===========
This version adds support for Right to Left languages which include Hebrew and
Arabic. Support for precompiled headers has been added to the samples.


Version 6.6
===========
This version adds improvements to docking containers and TabbedMDIs and
extends the CDC class.


Version 6.5
===========
Version 6.5 adds a tab control and TabbedMDIs to the Win32++ framework.
The following classes have been added:
 * CTab
 * CTabbedMDI


Version 6.4
===========
Version 6.4 adds docking containers to the Win32++ framework. Containers behave
as a view window for dockers. They include a tab control to display various pages,
and can also optionally contain a toolbar.


Version 6.3
===========
This version adds support for docking windows.


Version 6.2
===========
This version adds a Most Recently Used (MRU) list to frames.
Frame applications now store the window size and position in the registry.


Version 6.1
===========
Win32++ is now implemented as a header only library, and now supports
building 64bit applications. 

The following classes have also been added:
 * CListView.
 * CTreeView.
 * CPoint
 * CRect
 * CSize.


Version 6.0
===========
This version adds network support to the library. The following classes
have been added:
 * CDC
 * CSocket

Version 5.6
===========
* Property sheets are now supported. Property sheets can be modal, modeless
  or Wizards.

Version 5.5
===========
* Added Menubar theme support
  - Gradient background for hot buttons (any two colors)
  - Gradient background for pressed buttons (any two colors)
  - Gradient Sidebar for menu items based on pressed button colors.
  - A border color for Menubar buttons and selected menu items


Version 5.4
===========
* Added Rebar themes, including:
  - Gradient background for the rebar control (any two colors)
  - Gradient background for the rebar bands (any two colors)
  - The Menubar can be locked in place.
  - The bands can be kept left.
  - Short bands
  - Bands can have rounded borders
  - Bands with rounded borders can have a flat style
* Added Toolbar themes, including:
  - Gradient background for hot buttons (any two colors)
  - Gradient background for pressed buttons (any two colors)
  - Colored outline for hot and pressed buttons (any color)
* CFrame provides built in support for multiple toolbars with AddToolbarBand


Version 5.3
===========
* Owner drawn drop down menu items with icons.  By default, the
   framework uses the ToolBar's bitmap and resource IDs for displaying
   icons. Override CFrame::SetupToolBar to change this behaviour.
* CreateEx automatically subclasses windows controls such as List-View,
   ToolBar, Richedit etc.


Version 5.2
===========
* Added a separate HINSTANCE for resources. This provides for multilingual
   support, when resources are loaded via a DLL.


Version 5.1
===========
* Attach can be used to subclass existing windows and associate them with a CWnd.
* Dialog controls can be sublcassed and converted to CWnd objects, using
   AttachDlgItem.
* Improved CToolbar. The ToolBar uses image lists which support using separate
  bitmaps for normal, hot and disabled buttons. Text can be added to ToolBar
  buttons, and the style can be set.
* Notifications from common controls are reflected back to the CWnd object that
  generated them.
* Messages from old style common controls are reflected back to the CWnd object
  that generated them.


Version 5.0
===========
* Added MDI frame support.
* Added the following samples:
* Explorer sample
* Notepad sample
* DirectX sample


Version 4.0
===========
* Changed the method of associating the Window's handle (HWND) and
   the CWnd pointer.  Previously SetWindowLong was used to store the
   CWin pointer in the windows data area. Now std::map is used to
   associate a CWnd pointer with the HWND (i.e. the window's handle).
* Added rebars to the frame window
* Added a menubar to the frame window


Version 3.0
===========
* Added Tracing. To use tracing, ensure that you are in Debug mode,
   i.e. the variable _DEBUG is defined, and use the TRACE("xxxxx")
   function to send trace messages.
* Enhanced the error reporting in the event of an exception. The
   GetLastError information is now decoded and displayed if it
   provides any additional information.
* Added support for multi-threaded applications.


Version 2.0
===========
* The code is now Unicode compliant.
* Added CWinApp class to start Win32++.
* Added CDialog class to support modal and modeless dialogs as well
   as indirect dialogs (dialogs created from a dialog template in
   memory).
* Added the Create function to simplify window creation.


Version 1.0
===========
Initial Release