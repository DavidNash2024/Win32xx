Version 6.4
===========

Major Changes
------------
* Docking:
  - Added tabbed docking container with optional toolbar
  - Added close button to the caption of docked windows
* Added Region support to CDC class.
* Docking sample enhancements:
  - Added save/restore dock layout to docking sample
  - Added Close all dockables and Default Dock layout to docking sample
* Notepad sample enhancements:
  - Now capable of handling Unicode text
 
All Changes
-----------
Added CDC::CreateEllipticRegion
Added CDC::CreateEllipticRegionIndirect
Added CDC::CreatePolygonRgn
Added CDC::CreatePolyPolygonRgn
Added CDC::CreateRectRgn
Added CDC::CreateRectRgnIndirect
Added CDC::DetachRegion
Added CDC::ExtCreateRegion
Added CFrame::AddToolbarButton 
Added CWnd::GetZOrder
Added CToolbar::SetButtonWidth (useful for adding a ComboBox to a toolbar)
Added CToolbar::SetImages
Added CMDI::SetActiveMDIChild 
Changed CMDI::GetActiveMDIChild (it now returns a CWnd* instead of a HWND)
Removed CMDI::GetActiveMDIChildCWnd

Subclassed windows now call OnCommand and OnNotify
Exceptions now genereate TRACE output to display the error.

Fixes
-----
Fixed Z order of undocked windows



Version 6.3
===========

Major Changes
-------------
* Added support for docking. See below for more information on Docking  
   - Note: CDockable is now recommended over CSplitter for splitter apps.     
* Added the Fast GDI demo. This demonstrates the use of the TintBitmap function.
* MDI child windows now require a view window. The use of a view window is 
   now the same for Frames, MDI children, and dockables. The MDI demo sample
   has been extended to include ListView and TreeView views.
* Added message translation. This allows modeless dialogs and propertysheets
    to process the tab (and other) keys.
* Added a CWnd::Destroy function. This returns a CWnd back to its default
    state ready to be reused.
* SetView can now be used to change the frame's view from one CWnd to 
    another.
* The Frame now stores which child window had focus before it is de-activated,
    and returns focus to this child when the frame application is reactivated.    
    
    
Fixes
-----    
* CFrame now supports Extra Large fonts in the menu and status bar. Also, font
    size can be changed while the application is running.
* 16Bit colours (and greyscale) are now rendered properly
* Tabbing now works for modeless dialogs and property sheets
   (uses PreTranslateMessage).            


Incompatibilities with previous versions
----------------------------------------
* MDI Child windows now require a view. Refer to the MDI Demo sample for an
   example of how to add views to a MDI child.
* Some functions have been added to CWnd which have the same name as their 
   Win32 counterparts. Prefix functions with the global scope specifier '::' 
   to use the original Win32 API function instead of the Win32++ version.


More About Docking
------------------
* Any CWnd object inherrited from CDockable is capable of docking other CWnd
    objects inherrited from CDockable.
* Dockables can be docked in any of the 4 sides. Any number of windows can be 
   docked on a side.
* A dockable could be docked inside another dockable which in turn is docked
   inside another. There is no theoretical limit as to depth of dockables 
   within dockables.
* Dockables have a View window, just like the Frame, and MDI children.
* Dockables are seperated by a movable splitter bar.
* Dockables use a modern style of dock targeting and dock hinting (the same
    as Visual Studio 2005 and 2008).
* Dockables can have styles including:
  - DS_NOTDOCKED			   
  - DS_DOCKED_LEFT	   
  - DS_DOCKED_RIGHT   
  - DS_DOCKED_TOP		   
  - DS_DOCKED_BOTTOM  
  - DS_NODOCKCHILD_LEFT	 	
  - DS_NODOCKCHILD_RIGHT	 	
  - DS_NODOCKCHILD_TOP	 
  - DS_NODOCKCHILD_BOTTOM	 	
  - DS_NO_RESIZE				 
  - DS_NO_CAPTION		 
  - DS_NO_UNDOCK
* CDockable is now the recommended alternative to CSplitter (being much simpler
    to implement - see the example below). The DS_NO_CAPTION and DS_NO_UNDOCK
    styles should be specified if docking and undocking are not required.

Example of how to dock 8 dockables inside a dockable view:
----------------------------------------------------------
void CMainFrame::OnInitialUpdate()
{
    // CTextDockable in inherrited from CDockable
	CDockable* pDockLeft   = m_DockView.AddDockedChild(new CTextDockable, DS_DOCKED_LEFT, 100);
	CDockable* pDockRight  = m_DockView.AddDockedChild(new CTextDockable, DS_DOCKED_RIGHT, 100);
	CDockable* pDockTop    = m_DockView.AddDockedChild(new CTextDockable, DS_DOCKED_TOP, 100);
	CDockable* pDockBottom = m_DockView.AddDockedChild(new CTextDockable, DS_DOCKED_BOTTOM, 100);

	// Dock 4 dockables inside other dockables
    pDockLeft->AddDockedChild(new CTextDockable, DS_DOCKED_BOTTOM, 100);
	pDockRight->AddDockedChild(new CTextDockable, DS_DOCKED_BOTTOM, 100);
	pDockTop->AddDockedChild(new CTextDockable, DS_DOCKED_RIGHT, 100);
	pDockBottom->AddDockedChild(new CTextDockable, DS_DOCKED_RIGHT, 100);
}      			   

(Refer to the Docking sample for an example of to use CDockable.)    

All Changes
-------
* Added CDockable class to support docking
* Added CDockBar class (a nested class of CDockable)
* Added CDockClient class (a nested class of CDockable)
* Added CDockHint class (a nested class of CDockable)
* Added CDockTarget class (a nested class of CDockable)
* Added Docking demo
* Added FastGDI demo
* Added DrawBitmap (global function in gdi.h)
* Added TintBitmap (global function in gdi.h)
* Added IsLeftButtonDown (global function in dockable.h)
* Added CWnd::BringWindowToTop
* Added CWnd::Destroy 
* Added CWnd::DrawMenuBar
* Added CWnd::GetDC
* Added CWnd::GetDCEx
* Added CWnd::GetMenu
* Added CWnd::GetScrollInfo
* Added CWnd::GetScrollPos
* Added CWnd::GetScrollRange
* Added CWnd::GetWindow
* Added CWnd::GetWindowDC
* Added CWnd::MessageBox
* Added CWnd::PreTranslateMessage
* Added CWnd::ReleaseDC
* Added CWnd::ScrollWindow
* Added CWnd::SetMenu
* Added CWnd::SetScrollInfo
* Added CWnd::SetScrollPos
* Added CWnd::SetScrollRange
* Removed CWinApp::GetFrame
* Removed CWinApp::SetFrame
* Changed CFrame::SetView 
 


Version 6.2
===========

Changes
-------
* The default colour scheme has been changed from blue to grey. 
  The blue, olive and silver colour schemes continue to be used on Windows XP
  with themes enabled. 

New Features
------------
* Frame applications now store the window size and position in the registry.
To enable this, set the m_KeyName member variable in CMainFrame's constructor.
This member variable can be used to reflect the company name and application
name, for example:
  m_KeyName = _T("SomeCompany\\SomeApp");
  
* Frame applications now provide a Most Recently Used (MRU) list. This list is 
stored in the registry.

* Extended CWnd
CWnd now includes functions which wrap many of the Windows API functions that 
affect to windows. 


Version 6.1
===========

New Features
------------
* All Win32++ code has been moved to header files.
This simplifies the use of Win32++. To add Win32++ to a project, simply 
include the appropriate Win32++ header files in your code. There is no longer
any need to add the Win32++ files to the project, although doing so may
still prove useful under some circumstances. Depending on the compiler/IDE
used, adding the Win32++ header files to the project may add the various 
Win32++ classes to the class view.
 
* Added CListView class.
This class encapsulates the various messages and macros used by the Win32/64 
API to manage the List-View common control. You can inherit from this class
when creating your own List-View control in a window, or attaching a 
List-View control from a dialog.

* Added CTreeView class.
This class encapsulates the various messages and macros used by the Win32/64 
API to manage the Tree-View common control. You can inherit from this class
when creating your own Tree-View control in a window, or attaching a 
Tree-View control from a dialog.

* Added CPoint CRect and CSize classes
The CPoint, CRect and CSize classes can be used anywhere a POINT, RECT
or CSize struct can be used respectively. In addition:
- The constructors ensure that members are set to reasonable values.
  They also allow a default value to be set when the class is used as a 
  function argument.
- The classes have additional member functions, including operator==
  and operator!= .   
- These classes makes porting code from MFC or WTL a little easier.

* Extended the CRebar, CToolbar and CStatusbar classes.


Version 6.02
============

New Features
------------
* Added support for x64 applications.

Win32++ can now be used to build 64 bit applications. The manifest file has 
been modified to support both 32bit and 64bit applications. The new manifest
should be used for any 64 bit applications that use common controls.

Users are encouraged to use the modern Win64 API functions like:
GetWindowLongPtr, SetWindowLongPtr, GetClassLongPtr and SetClassLongPtr.
Win32++ will convert these back to their Win32 API counterparts if required.


Version 6.01
============
Added    CFrame::SetMenuIcons
Added    CFrame::SetToolbarImages
Removed  CToolbar::SetToolbarImageList
Added    CToolbar::SetBitmap
Moved    CreateDisabledImageList to CFrame::CreateDisabledImageList
Modified CFrame::AddMenuIcons

New Features:
------------
* 32 bit bitmaps are now supported for toolbars (requires XP or Vista)
* SetMenuIcons and AddMenuIcons now also accept a bitmap for disabled icons
   in addition to the bitmap for normal icons.


Version 6.0
===========

New Features
------------
* Win32++ now also directly supports the Windows CE operating systems. 
   Windows CE is the operating system used on such things as Pocket PCs, 
   embedded systems and SmartPhones. The Win32++ examples for Windows CE
   include the project files for eMbedded Visual C++ 4.0, and Visual 
   Studio 2005.
   
* Added Networking support. Win32++ now includes a CSocket class which
   encapsulates much of the Winsock API. This class is capable of monitoring
   network events, such as connection requests from clients, and notification
   that the socket has data ready to be received. Command line and dialog
   samples are provide to demonstrate how the class can be used to create
   TCP/IP (and UDP/IP) servers and clients.
  
* Added a CDC class. This class simplifies the drawing to device contexts. 
   This class can be used anywhere we would normally use a handle to a 
   device context (HDC). Its features include:
   - Automates the selection of GDI objects into the device context.
   - Automates the destruction of GDI objects.
   - Automates the deletion or release of the device contexts.
   
* PreRegisterClass can now be used to set the WNDCLASS parameters before the
   window class is registered. This provides a convenient way to set a window's 
   background brush or cursor.
   
* Improvements to tracing. It now uses OutputDebugString to send the trace
   output the debug/output pane of the various IDE's. This is now also 
   compatible with debuggers, should you choose to use them. Previously the 
   tracing created a separate window to display text.

* Added an immediate mode to CSplitter. There is now the choice of resizing
   the panes while the splitter bar is being dragged, or defer the resizing
   until the splitter bar drag is complete (as before). CSplitter's 
   constructor now requires no arguments, making the class simpler to use.
   
* Automatically detects the XP theme used (Default, Silver or Olive), and
   adjusts the theme colors accordingly.
   
* Added project files for Borland's Turbo C++ 2006. This is a free compiler
   available from Borland. It can be downloaded here: 
   http://www.codegear.com/downloads/free/turbo

* Enhanced the tutorial. It now also demonstrates file operations and printing.

  
Version 5.6
===========
* Property Sheets are now supported. The files PropertySheet.cpp and 
   PropertySheet.h have been added to Win32++. These files define
   the CPropertySheet and CPropertyPage classes. The Property sheet generic 
   demonstrates the following:
  - Modal property sheets.
  - Modeless property sheets.
  - Wizards.    


Version 5.5
===========
* Added Menubar theme support
  - Gradient background for hot buttons (any two colors)
  - Gradient background for pressed buttons (any two colors)
  - Gradient Sidebar for menu items based on pressed button colors.
  - A border color for Menubar buttons and selected menu items


Version 5.4
===========
* Added Rebar themes, including:
  - Gradient background for the rebar control (any two colors)
  - Gradient background for the rebar bands (any two colors)
  - The Menubar can be locked in place.
  - The bands can be kept left.
  - Short bands
  - Bands can have rounded borders
  - Bands with rounded borders can have a flat style
* Added Toolbar themes, including:
  - Gradient background for hot buttons (any two colors)
  - Gradient background for pressed buttons (any two colors)
  - Colored outline for hot and pressed buttons (any color)
* Built in support for multiple toolbars (in rebars) with AddToolbarBand
* Added Forms Sample
* Added Themes Sample


Version 5.3
===========
* Owner drawn drop down menu items with icons.  CMenubar::SetIcons is
   used to determine which menu items display an icon. By default, the
   framework uses the toolbar's bitmap and resource IDs for displaying 
   icons. Override CFrame::SetButtons to change this behavior.
* Automatic subclassing for windows using Windows API defined window classes.
   Now when a window is based on predefined window classes, like the 
   common controls (e.g. list-view, tree-view, richedit), the window is
   automatically subclassed. There is now no need to call the subclass
   function in user code.   


Version 5.2
===========
* Added a separate HINSTANCE for resources. This provides for multilingual
   support, when resources are loaded via a DLL.
* Added the Internet Browser Sample. It demonstrates how to host an ActiveX
   control in a Win32++ window. It requires ATL.
* Added the Performance sample. This program now also conducts a simple 
   performance test to measure the efficiency of the message handling. 

   
Version 5.1
===========
* Existing windows can be subclassed and converted to CWnd objects using Attach
* Dialog items can be sublcassed and converted to CWnd objects, using 
   AttachDlgItem.
* Improvements to CToolbar. The toolbar uses image lists which support using 
  separate bitmaps for normal, hot and disabled buttons. Text can be added
  to toolbar buttons, and the style can be set.
* Improvements to CStatusbar.  
* Notifications from common controls are reflected back to the CWnd object that
  generated them. 
* Messages from old style common controls are reflected back to the CWnd object
  that generated them.
  

Version 5.0
===========
* Added rebars to the frame window
* Added a menubar to the frame window
* Added MDI frame support
* Added splitter window support


Version 4
=========
* Changed the method of associating the Window's handle (HWND) and 
   the CWnd pointer.  Previously SetWindowLong was used to store the 
   CWin pointer in the windows data area. Now std::map is used to 
   associate a CWnd pointer with the HWND (i.e. the window's handle).   
* Added the lpParam parameter to both versions of the CWnd::CreateEx
   function.  Users are now free to use lpParam for their own 
   purposes. This parameter defaults to NULL for backwards 
   compatibility.
        

Version 3
=========
* Added Tracing. To use tracing, ensure that you are in Debug mode, 
   i.e. the variable _DEBUG is defined, and use the TRACE("xxxxx")
   function to send trace messages.  The first TRACE(...) creates 
   the Trace output window.   
* Enhanced the error reporting in the event of an exception. The 
   GetLastError information is now decoded and displayed if it 
   provides any additional information.
* Added support for multi-threaded applications.    
    

Version 2
=========
* The code is now Unicode compliant.
* Added debug mode. Exceptions produce a warning in a message box
   if _DEBUG is defined. 
* Added CWinApp class to start Win32++.
* Added CDialog class to support modal and modeless dialogs as well
   as indirect dialogs (dialogs created from a dialog template in
   memory).
* Added the Create function to simplify window creation.
    

Version 1.0
===========
Initial Release
